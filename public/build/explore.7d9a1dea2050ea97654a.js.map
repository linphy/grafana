{"version":3,"sources":["webpack:///./public/app/features/explore/ErrorBoundary.tsx","webpack:///./public/app/features/explore/Legend.tsx","webpack:///./public/app/features/explore/Graph.tsx","webpack:///./public/app/features/explore/Explore.tsx","webpack:///./public/app/features/explore/Panel.tsx","webpack:///./public/app/features/explore/Table.tsx","webpack:///./public/app/features/explore/TimePicker.tsx","webpack:///./public/app/features/explore/utils/query.ts","webpack:///./public/app/features/explore/ElapsedTime.tsx","webpack:///./public/app/features/explore/QueryTransactionStatus.tsx","webpack:///./public/app/features/explore/QueryRows.tsx","webpack:///./public/app/core/utils/text.ts","webpack:///./public/app/features/explore/Logs.tsx","webpack:///./public/app/features/explore/Wrapper.tsx"],"names":["ErrorBoundary","_super","props","_this","call","this","state","error","errorInfo","tslib__WEBPACK_IMPORTED_MODULE_0__","prototype","componentDidCatch","setState","render","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","className","style","whiteSpace","toString","componentStack","children","react__WEBPACK_IMPORTED_MODULE_1__","LegendItem","_a","series","react_default","color","title","alias","Legend","tslib_es6","_b","items","data","map","key","id","react","FLOT_OPTIONS","legend","show","lines","linewidth","zero","shadowSize","grid","minBorderMargin","markings","backgroundColor","borderWidth","clickable","margin","left","right","labelMarginX","selection","mode","Graph_Graph","Graph","apply","arguments","showAllTimeSeries","onPlotSelected","event","ranges","onChangeTime","range","from","moment_default","xaxis","to","onShowAllTimeSeries","draw","getGraphData","slice","componentDidMount","$el","jquery_js_exposed_default","bind","componentDidUpdate","prevProps","split","height","size","width","componentWillUnmount","unbind","userOptions","length","ts","label","getFlotPairs","ticks","isMoment","datemath","min","valueOf","max","dynamicOptions","timezone","timeformat","secPerTick","time_format","options","plot","_c","Fragment","onClick","explore_Legend","__webpack_exports__","Object","react_sizeme","MAX_HISTORY_ITEMS","getIntervals","datasource","resolution","interval","intervalMs","absoluteRange","app_core_utils_datemath__WEBPACK_IMPORTED_MODULE_9__","app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_5__","calculateInterval","Explore","getRef","el","onAddQueryRow","index","queryExpressions","queries","queryTransactions","concat","query","_utils_query__WEBPACK_IMPORTED_MODULE_23__","qt","rowIndex","onChangeDatasource","option","origin","datasourceError","datasourceLoading","datasourceName","value","datasourceSrv","get","sent","setDatasource","onChangeQuery","override","nextQuery","nextQueries","filter","onSubmit","nextRange","onClickClear","prevState","showingStartPage","Boolean","StartPage","saveState","onClickCloseSplit","onChangeSplit","onClickGraphButton","showingGraph","nextQueryTransactions","resultType","onClickLogsButton","showingLogs","onClickQuery","q","onClickSplit","cloneState","onClickTableButton","showingTable","onClickTableCell","columnKey","rowValue","onModifyQueries","type","action","modifyQuery","preventSubmit_1","preventSubmit","undefined","i","hints","hint","fix","onRemoveQueryRow","supportsGraph","supportsLogs","supportsTable","runTableQuery","runGraphQueries","runLogsQuery","stateKey","onSaveState","initialQueries","splitState","urlState","initialRange","app_core_utils_explore__WEBPACK_IMPORTED_MODULE_10__","datasourceMissing","exploreDatasources","graphRange","history","Error","datasources","getExploreSources","ds","name","meta","explore","metrics","logs","datasourceId","requestedDatasourceId","testDatasource","testResult","status","message","error_1","statusText","historyKey","app_core_store__WEBPACK_IMPORTED_MODULE_7__","getObject","init","importQueries","wrappedQueries","refId","String","expr","modifiedQueries","pluginExports","ExploreStartPage","buildQueryOptions","targetOptions","offsetWidth","targets","startQueryTransaction","queryOptions","transaction","done","latency","completeQueryTransaction","transactionId","result","find","getQueryHints","Date","now","forEach","setObject","updateHistory","discardTransactions","failQueryTransaction","response","console","format","instant","res","results","dataList","seriesData","datapoints","target","colorIndex","app_core_utils_colors__WEBPACK_IMPORTED_MODULE_6__","app_core_time_series2__WEBPACK_IMPORTED_MODULE_8__","unit","makeTimeSeriesList","response_1","valueWithRefId","response_2","response_3","position","graphHeight","exploreClass","selectedDatasource","d","graphRangeIntervals","graphLoading","some","tableLoading","logsLoading","graphResult","lodash__WEBPACK_IMPORTED_MODULE_4___default","flatten","tableResult","app_core_table_model__WEBPACK_IMPORTED_MODULE_15__","logsResult","mergeStreams","loading","ref","react_select__WEBPACK_IMPORTED_MODULE_3__","classNamePrefix","isMulti","isLoading","isClearable","onChange","styles","app_core_components_Picker_ResetStyles__WEBPACK_IMPORTED_MODULE_11__","placeholder","loadingMessage","noOptionsMessage","components","Option","app_core_components_Picker_PickerOption__WEBPACK_IMPORTED_MODULE_12__","IndicatorsContainer","app_core_components_Picker_IndicatorsContainer__WEBPACK_IMPORTED_MODULE_13__","NoOptionsMessage","app_core_components_Picker_NoOptionsMessage__WEBPACK_IMPORTED_MODULE_14__","_TimePicker__WEBPACK_IMPORTED_MODULE_22__","_QueryRows__WEBPACK_IMPORTED_MODULE_17__","onClickHintFix","onExecuteQuery","transactions","_ErrorBoundary__WEBPACK_IMPORTED_MODULE_21__","_Panel__WEBPACK_IMPORTED_MODULE_16__","isOpen","onToggle","_Graph__WEBPACK_IMPORTED_MODULE_18__","_Table__WEBPACK_IMPORTED_MODULE_20__","onClickCell","_Logs__WEBPACK_IMPORTED_MODULE_19__","PureComponent","react_hot_loader__WEBPACK_IMPORTED_MODULE_2__","module","Panel","onClickToggle","iconClass","loaderClass","EMPTY_TABLE","VALUE_REGEX","Table","getCellProps","rowInfo","column","e","Header","row","tableModel","columnNames","columns","text","filterable","accessor","test","Cell","react__WEBPACK_IMPORTED_MODULE_2___default","noDataText","react_table__WEBPACK_IMPORTED_MODULE_3__","rows","getTdProps","minRows","resolveData","cells","lodash__WEBPACK_IMPORTED_MODULE_1___default","zipObject","prepareRows","showPagination","react__WEBPACK_IMPORTED_MODULE_2__","DATE_FORMAT","DEFAULT_RANGE","parseTime","isUtc","moment__WEBPACK_IMPORTED_MODULE_2___default","indexOf","time","isNaN","parseInt","utc","TimePicker","handleChangeFrom","fromRaw","handleChangeTo","toRaw","handleClickApply","app_core_utils_datemath__WEBPACK_IMPORTED_MODULE_3__","rangeString","app_core_utils_rangeutil__WEBPACK_IMPORTED_MODULE_4__","handleClickLeft","move","handleClickPicker","handleClickRight","handleClickRefresh","handleClickRelativeOption","dropdownRef","dropdownEl","refreshInterval","getDerivedStateFromProps","direction","nextTo","nextFrom","timespan","getTimeOptions","renderDropdown","timeOptions","keys","section","group","active","display","generateQueryKey","Math","random","ensureQueries","hasQuery","__webpack_require__","ElapsedTime","elapsed","tick","offset","start","timer","window","setInterval","componentWillReceiveProps","nextProps","clearInterval","toFixed","QueryTransactionStatus_QueryTransactionStatusItem","QueryTransactionStatusItem","formatLatency","explore_ElapsedTime","QueryTransactionStatus","t","QueryRows_QueryRow","QueryRow","onClickAddButton","onClickClearButton","onClickRemoveButton","onPressEnter","transactionWithError","getFirstHintFromTransactions","queryError","QueryField","ExploreQueryField","explore_QueryField","explore_QueryTransactionStatus","initialQuery","onQueryChange","QueryRows_QueryRows","QueryRows","handlers","findHighlightChunksInText","searchWords","haystack","needle","regexp","RegExp","matches","match","exec","push","end","findMatchesInText","textToHighlight","join","graphOptions","bars","lineWidth","yaxis","tickDecimals","Logs_Logs","Logs","dedup","logs_model","none","showLabels","showLocalTime","showUtc","onChangeDedup","onChangeLabels","checked","onChangeLocalTime","onChangeUtc","_d","hasData","dedupedData","dedupCount","reduce","sum","duplicates","cssColumnSizes","logEntriesStyle","gridTemplateColumns","Switch","small","exact","numbers","signature","item","logLevel","Array","timeLocal","timeFromNow","timestamp","labels","main_default","entry","findChunks","highlightClassName","STATE_KEY_RIGHT","Wrapper","urlStates","updateLocation","app_core_utils_explore__WEBPACK_IMPORTED_MODULE_5__","urlStateLeft","urlStateRight","_ErrorBoundary__WEBPACK_IMPORTED_MODULE_6__","_Explore__WEBPACK_IMPORTED_MODULE_7__","mapDispatchToProps","app_core_actions__WEBPACK_IMPORTED_MODULE_4__","react_redux__WEBPACK_IMPORTED_MODULE_3__","location"],"mappings":"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","file":"explore.7d9a1dea2050ea97654a.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class ErrorBoundary extends Component<{}, any> {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { error: null, errorInfo: null };\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    // Catch errors in any components below and re-render with error message\r\n    this.setState({\r\n      error: error,\r\n      errorInfo: errorInfo,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.errorInfo) {\r\n      // Error path\r\n      return (\r\n        <div className=\"explore-container\">\r\n          <h3>An unexpected error happened.</h3>\r\n          <details style={{ whiteSpace: 'pre-wrap' }}>\r\n            {this.state.error && this.state.error.toString()}\r\n            <br />\r\n            {this.state.errorInfo.componentStack}\r\n          </details>\r\n        </div>\r\n      );\r\n    }\r\n    // Normally, just render children\r\n    return this.props.children;\r\n  }\r\n}\r\n","import React, { PureComponent } from 'react';\r\n\r\nconst LegendItem = ({ series }) => (\r\n  <div className=\"graph-legend-series\">\r\n    <div className=\"graph-legend-icon\">\r\n      <i className=\"fa fa-minus pointer\" style={{ color: series.color }} />\r\n    </div>\r\n    <a className=\"graph-legend-alias pointer\" title={series.alias}>\r\n      {series.alias}\r\n    </a>\r\n  </div>\r\n);\r\n\r\nexport default class Legend extends PureComponent<any, any> {\r\n  render() {\r\n    const { className = '', data } = this.props;\r\n    const items = data || [];\r\n    return (\r\n      <div className={`${className} graph-legend ps`}>\r\n        {items.map(series => <LegendItem key={series.id} series={series} />)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import $ from 'jquery';\r\nimport React, { PureComponent } from 'react';\r\nimport moment from 'moment';\r\nimport { withSize } from 'react-sizeme';\r\n\r\nimport 'vendor/flot/jquery.flot';\r\nimport 'vendor/flot/jquery.flot.time';\r\nimport 'vendor/flot/jquery.flot.selection';\r\nimport 'vendor/flot/jquery.flot.stack';\r\n\r\nimport { RawTimeRange } from 'app/types/series';\r\nimport * as dateMath from 'app/core/utils/datemath';\r\nimport TimeSeries from 'app/core/time_series2';\r\n\r\nimport Legend from './Legend';\r\n\r\nconst MAX_NUMBER_OF_TIME_SERIES = 20;\r\n\r\n// Copied from graph.ts\r\nfunction time_format(ticks, min, max) {\r\n  if (min && max && ticks) {\r\n    const range = max - min;\r\n    const secPerTick = range / ticks / 1000;\r\n    const oneDay = 86400000;\r\n    const oneYear = 31536000000;\r\n\r\n    if (secPerTick <= 45) {\r\n      return '%H:%M:%S';\r\n    }\r\n    if (secPerTick <= 7200 || range <= oneDay) {\r\n      return '%H:%M';\r\n    }\r\n    if (secPerTick <= 80000) {\r\n      return '%m/%d %H:%M';\r\n    }\r\n    if (secPerTick <= 2419200 || range <= oneYear) {\r\n      return '%m/%d';\r\n    }\r\n    return '%Y-%m';\r\n  }\r\n\r\n  return '%H:%M';\r\n}\r\n\r\nconst FLOT_OPTIONS = {\r\n  legend: {\r\n    show: false,\r\n  },\r\n  series: {\r\n    lines: {\r\n      linewidth: 1,\r\n      zero: false,\r\n    },\r\n    shadowSize: 0,\r\n  },\r\n  grid: {\r\n    minBorderMargin: 0,\r\n    markings: [],\r\n    backgroundColor: null,\r\n    borderWidth: 0,\r\n    // hoverable: true,\r\n    clickable: true,\r\n    color: '#a1a1a1',\r\n    margin: { left: 0, right: 0 },\r\n    labelMarginX: 0,\r\n  },\r\n  selection: {\r\n    mode: 'x',\r\n    color: '#666',\r\n  },\r\n  // crosshair: {\r\n  //   mode: 'x',\r\n  // },\r\n};\r\n\r\ninterface GraphProps {\r\n  data: any[];\r\n  height?: string; // e.g., '200px'\r\n  id?: string;\r\n  range: RawTimeRange;\r\n  split?: boolean;\r\n  size?: { width: number; height: number };\r\n  userOptions?: any;\r\n  onChangeTime?: (range: RawTimeRange) => void;\r\n}\r\n\r\ninterface GraphState {\r\n  showAllTimeSeries: boolean;\r\n}\r\n\r\nexport class Graph extends PureComponent<GraphProps, GraphState> {\r\n  $el: any;\r\n\r\n  state = {\r\n    showAllTimeSeries: false,\r\n  };\r\n\r\n  getGraphData() {\r\n    const { data } = this.props;\r\n\r\n    return this.state.showAllTimeSeries ? data : data.slice(0, MAX_NUMBER_OF_TIME_SERIES);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.draw();\r\n    this.$el = $(`#${this.props.id}`);\r\n    this.$el.bind('plotselected', this.onPlotSelected);\r\n  }\r\n\r\n  componentDidUpdate(prevProps: GraphProps) {\r\n    if (\r\n      prevProps.data !== this.props.data ||\r\n      prevProps.range !== this.props.range ||\r\n      prevProps.split !== this.props.split ||\r\n      prevProps.height !== this.props.height ||\r\n      (prevProps.size && prevProps.size.width !== this.props.size.width)\r\n    ) {\r\n      this.draw();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.$el.unbind('plotselected', this.onPlotSelected);\r\n  }\r\n\r\n  onPlotSelected = (event, ranges) => {\r\n    if (this.props.onChangeTime) {\r\n      const range = {\r\n        from: moment(ranges.xaxis.from),\r\n        to: moment(ranges.xaxis.to),\r\n      };\r\n      this.props.onChangeTime(range);\r\n    }\r\n  };\r\n\r\n  onShowAllTimeSeries = () => {\r\n    this.setState(\r\n      {\r\n        showAllTimeSeries: true,\r\n      },\r\n      this.draw\r\n    );\r\n  };\r\n\r\n  draw() {\r\n    const { range, size, userOptions = {} } = this.props;\r\n    const data = this.getGraphData();\r\n\r\n    const $el = $(`#${this.props.id}`);\r\n    let series = [{ data: [[0, 0]] }];\r\n\r\n    if (data && data.length > 0) {\r\n      series = data.map((ts: TimeSeries) => ({\r\n        color: ts.color,\r\n        label: ts.label,\r\n        data: ts.getFlotPairs('null'),\r\n      }));\r\n    }\r\n\r\n    const ticks = (size.width || 0) / 100;\r\n    let { from, to } = range;\r\n    if (!moment.isMoment(from)) {\r\n      from = dateMath.parse(from, false);\r\n    }\r\n    if (!moment.isMoment(to)) {\r\n      to = dateMath.parse(to, true);\r\n    }\r\n    const min = from.valueOf();\r\n    const max = to.valueOf();\r\n    const dynamicOptions = {\r\n      xaxis: {\r\n        mode: 'time',\r\n        min: min,\r\n        max: max,\r\n        label: 'Datetime',\r\n        ticks: ticks,\r\n        timezone: 'browser',\r\n        timeformat: time_format(ticks, min, max),\r\n      },\r\n    };\r\n    const options = {\r\n      ...FLOT_OPTIONS,\r\n      ...dynamicOptions,\r\n      ...userOptions,\r\n    };\r\n    $.plot($el, series, options);\r\n  }\r\n\r\n  render() {\r\n    const { height = '100px', id = 'graph' } = this.props;\r\n    const data = this.getGraphData();\r\n\r\n    return (\r\n      <>\r\n        {this.props.data &&\r\n          this.props.data.length > MAX_NUMBER_OF_TIME_SERIES &&\r\n          !this.state.showAllTimeSeries && (\r\n            <div className=\"time-series-disclaimer\">\r\n              <i className=\"fa fa-fw fa-warning disclaimer-icon\" />\r\n              {`Showing only ${MAX_NUMBER_OF_TIME_SERIES} time series. `}\r\n              <span className=\"show-all-time-series\" onClick={this.onShowAllTimeSeries}>{`Show all ${\r\n                this.props.data.length\r\n              }`}</span>\r\n            </div>\r\n          )}\r\n        <div id={id} className=\"explore-graph\" style={{ height }} />\r\n        <Legend data={data} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withSize()(Graph);\r\n","import React from 'react';\r\nimport { hot } from 'react-hot-loader';\r\nimport Select from 'react-select';\r\nimport _ from 'lodash';\r\n\r\nimport { DataSource } from 'app/types/datasources';\r\nimport { ExploreState, ExploreUrlState, HistoryItem, Query, QueryTransaction, ResultType } from 'app/types/explore';\r\nimport { RawTimeRange, DataQuery } from 'app/types/series';\r\nimport kbn from 'app/core/utils/kbn';\r\nimport colors from 'app/core/utils/colors';\r\nimport store from 'app/core/store';\r\nimport TimeSeries from 'app/core/time_series2';\r\nimport { parse as parseDate } from 'app/core/utils/datemath';\r\nimport { DEFAULT_RANGE } from 'app/core/utils/explore';\r\nimport ResetStyles from 'app/core/components/Picker/ResetStyles';\r\nimport PickerOption from 'app/core/components/Picker/PickerOption';\r\nimport IndicatorsContainer from 'app/core/components/Picker/IndicatorsContainer';\r\nimport NoOptionsMessage from 'app/core/components/Picker/NoOptionsMessage';\r\nimport TableModel, { mergeTablesIntoModel } from 'app/core/table_model';\r\nimport { DatasourceSrv } from 'app/features/plugins/datasource_srv';\r\n\r\nimport Panel from './Panel';\r\nimport QueryRows from './QueryRows';\r\nimport Graph from './Graph';\r\nimport Logs from './Logs';\r\nimport Table from './Table';\r\nimport ErrorBoundary from './ErrorBoundary';\r\nimport TimePicker from './TimePicker';\r\nimport { ensureQueries, generateQueryKey, hasQuery } from './utils/query';\r\n\r\nconst MAX_HISTORY_ITEMS = 100;\r\n\r\nfunction getIntervals(range: RawTimeRange, datasource, resolution: number): { interval: string; intervalMs: number } {\r\n  if (!datasource || !resolution) {\r\n    return { interval: '1s', intervalMs: 1000 };\r\n  }\r\n  const absoluteRange: RawTimeRange = {\r\n    from: parseDate(range.from, false),\r\n    to: parseDate(range.to, true),\r\n  };\r\n  return kbn.calculateInterval(absoluteRange, resolution, datasource.interval);\r\n}\r\n\r\nfunction makeTimeSeriesList(dataList, options) {\r\n  return dataList.map((seriesData, index) => {\r\n    const datapoints = seriesData.datapoints || [];\r\n    const alias = seriesData.target;\r\n    const colorIndex = index % colors.length;\r\n    const color = colors[colorIndex];\r\n\r\n    const series = new TimeSeries({\r\n      datapoints,\r\n      alias,\r\n      color,\r\n      unit: seriesData.unit,\r\n    });\r\n\r\n    return series;\r\n  });\r\n}\r\n\r\n/**\r\n * Update the query history. Side-effect: store history in local storage\r\n */\r\nfunction updateHistory(history: HistoryItem[], datasourceId: string, queries: string[]): HistoryItem[] {\r\n  const ts = Date.now();\r\n  queries.forEach(query => {\r\n    history = [{ query, ts }, ...history];\r\n  });\r\n\r\n  if (history.length > MAX_HISTORY_ITEMS) {\r\n    history = history.slice(0, MAX_HISTORY_ITEMS);\r\n  }\r\n\r\n  // Combine all queries of a datasource type into one history\r\n  const historyKey = `grafana.explore.history.${datasourceId}`;\r\n  store.setObject(historyKey, history);\r\n  return history;\r\n}\r\n\r\ninterface ExploreProps {\r\n  datasourceSrv: DatasourceSrv;\r\n  onChangeSplit: (split: boolean, state?: ExploreState) => void;\r\n  onSaveState: (key: string, state: ExploreState) => void;\r\n  position: string;\r\n  split: boolean;\r\n  splitState?: ExploreState;\r\n  stateKey: string;\r\n  urlState: ExploreUrlState;\r\n}\r\n\r\nexport class Explore extends React.PureComponent<ExploreProps, ExploreState> {\r\n  el: any;\r\n  /**\r\n   * Current query expressions of the rows including their modifications, used for running queries.\r\n   * Not kept in component state to prevent edit-render roundtrips.\r\n   * TODO: make this generic (other datasources might not have string representations of current query state)\r\n   */\r\n  queryExpressions: string[];\r\n  /**\r\n   * Local ID cache to compare requested vs selected datasource\r\n   */\r\n  requestedDatasourceId: string;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    const splitState: ExploreState = props.splitState;\r\n    let initialQueries: Query[];\r\n    if (splitState) {\r\n      // Split state overrides everything\r\n      this.state = splitState;\r\n      initialQueries = splitState.queries;\r\n    } else {\r\n      const { datasource, queries, range } = props.urlState as ExploreUrlState;\r\n      initialQueries = ensureQueries(queries);\r\n      const initialRange = range || { ...DEFAULT_RANGE };\r\n      this.state = {\r\n        datasource: null,\r\n        datasourceError: null,\r\n        datasourceLoading: null,\r\n        datasourceMissing: false,\r\n        datasourceName: datasource,\r\n        exploreDatasources: [],\r\n        graphRange: initialRange,\r\n        history: [],\r\n        queries: initialQueries,\r\n        queryTransactions: [],\r\n        range: initialRange,\r\n        showingGraph: true,\r\n        showingLogs: true,\r\n        showingStartPage: false,\r\n        showingTable: true,\r\n        supportsGraph: null,\r\n        supportsLogs: null,\r\n        supportsTable: null,\r\n      };\r\n    }\r\n    this.queryExpressions = initialQueries.map(q => q.query);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const { datasourceSrv } = this.props;\r\n    const { datasourceName } = this.state;\r\n    if (!datasourceSrv) {\r\n      throw new Error('No datasource service passed as props.');\r\n    }\r\n    const datasources = datasourceSrv.getExploreSources();\r\n    const exploreDatasources = datasources.map(ds => ({\r\n      value: ds.name,\r\n      label: ds.name,\r\n    }));\r\n\r\n    if (datasources.length > 0) {\r\n      this.setState({ datasourceLoading: true, exploreDatasources });\r\n      // Priority: datasource in url, default datasource, first explore datasource\r\n      let datasource;\r\n      if (datasourceName) {\r\n        datasource = await datasourceSrv.get(datasourceName);\r\n      } else {\r\n        datasource = await datasourceSrv.get();\r\n      }\r\n      if (!datasource.meta.explore) {\r\n        datasource = await datasourceSrv.get(datasources[0].name);\r\n      }\r\n      await this.setDatasource(datasource);\r\n    } else {\r\n      this.setState({ datasourceMissing: true });\r\n    }\r\n  }\r\n\r\n  async setDatasource(datasource: any, origin?: DataSource) {\r\n    const supportsGraph = datasource.meta.metrics;\r\n    const supportsLogs = datasource.meta.logs;\r\n    const supportsTable = datasource.meta.metrics;\r\n    const datasourceId = datasource.meta.id;\r\n    let datasourceError = null;\r\n\r\n    // Keep ID to track selection\r\n    this.requestedDatasourceId = datasourceId;\r\n\r\n    try {\r\n      const testResult = await datasource.testDatasource();\r\n      datasourceError = testResult.status === 'success' ? null : testResult.message;\r\n    } catch (error) {\r\n      datasourceError = (error && error.statusText) || 'Network error';\r\n    }\r\n\r\n    if (datasourceId !== this.requestedDatasourceId) {\r\n      // User already changed datasource again, discard results\r\n      return;\r\n    }\r\n\r\n    const historyKey = `grafana.explore.history.${datasourceId}`;\r\n    const history = store.getObject(historyKey, []);\r\n\r\n    if (datasource.init) {\r\n      datasource.init();\r\n    }\r\n\r\n    // Check if queries can be imported from previously selected datasource\r\n    let queryExpressions = this.queryExpressions;\r\n    if (origin) {\r\n      if (origin.meta.id === datasource.meta.id) {\r\n        // Keep same queries if same type of datasource\r\n        queryExpressions = [...this.queryExpressions];\r\n      } else if (datasource.importQueries) {\r\n        // Datasource-specific importers, wrapping to satisfy interface\r\n        const wrappedQueries: DataQuery[] = this.queryExpressions.map((query, index) => ({\r\n          refId: String(index),\r\n          expr: query,\r\n        }));\r\n        const modifiedQueries: DataQuery[] = await datasource.importQueries(wrappedQueries, origin.meta);\r\n        queryExpressions = modifiedQueries.map(({ expr }) => expr);\r\n      } else {\r\n        // Default is blank queries\r\n        queryExpressions = this.queryExpressions.map(() => '');\r\n      }\r\n    }\r\n\r\n    // Reset edit state with new queries\r\n    const nextQueries = this.state.queries.map((q, i) => ({\r\n      ...q,\r\n      key: generateQueryKey(i),\r\n      query: queryExpressions[i],\r\n    }));\r\n    this.queryExpressions = queryExpressions;\r\n\r\n    // Custom components\r\n    const StartPage = datasource.pluginExports.ExploreStartPage;\r\n\r\n    this.setState(\r\n      {\r\n        StartPage,\r\n        datasource,\r\n        datasourceError,\r\n        history,\r\n        supportsGraph,\r\n        supportsLogs,\r\n        supportsTable,\r\n        datasourceLoading: false,\r\n        datasourceName: datasource.name,\r\n        queries: nextQueries,\r\n        showingStartPage: Boolean(StartPage),\r\n      },\r\n      () => {\r\n        if (datasourceError === null) {\r\n          this.onSubmit();\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  getRef = el => {\r\n    this.el = el;\r\n  };\r\n\r\n  onAddQueryRow = index => {\r\n    // Local cache\r\n    this.queryExpressions[index + 1] = '';\r\n\r\n    this.setState(state => {\r\n      const { queries, queryTransactions } = state;\r\n\r\n      // Add row by generating new react key\r\n      const nextQueries = [\r\n        ...queries.slice(0, index + 1),\r\n        { query: '', key: generateQueryKey() },\r\n        ...queries.slice(index + 1),\r\n      ];\r\n\r\n      // Ongoing transactions need to update their row indices\r\n      const nextQueryTransactions = queryTransactions.map(qt => {\r\n        if (qt.rowIndex > index) {\r\n          return {\r\n            ...qt,\r\n            rowIndex: qt.rowIndex + 1,\r\n          };\r\n        }\r\n        return qt;\r\n      });\r\n\r\n      return { queries: nextQueries, queryTransactions: nextQueryTransactions };\r\n    });\r\n  };\r\n\r\n  onChangeDatasource = async option => {\r\n    const origin = this.state.datasource;\r\n    this.setState({\r\n      datasource: null,\r\n      datasourceError: null,\r\n      datasourceLoading: true,\r\n      queryTransactions: [],\r\n    });\r\n    const datasourceName = option.value;\r\n    const datasource = await this.props.datasourceSrv.get(datasourceName);\r\n    this.setDatasource(datasource as any, origin);\r\n  };\r\n\r\n  onChangeQuery = (value: string, index: number, override?: boolean) => {\r\n    // Keep current value in local cache\r\n    this.queryExpressions[index] = value;\r\n\r\n    if (override) {\r\n      this.setState(state => {\r\n        // Replace query row\r\n        const { queries, queryTransactions } = state;\r\n        const nextQuery: Query = {\r\n          key: generateQueryKey(index),\r\n          query: value,\r\n        };\r\n        const nextQueries = [...queries];\r\n        nextQueries[index] = nextQuery;\r\n\r\n        // Discard ongoing transaction related to row query\r\n        const nextQueryTransactions = queryTransactions.filter(qt => qt.rowIndex !== index);\r\n\r\n        return {\r\n          queries: nextQueries,\r\n          queryTransactions: nextQueryTransactions,\r\n        };\r\n      }, this.onSubmit);\r\n    }\r\n  };\r\n\r\n  onChangeTime = (nextRange: RawTimeRange) => {\r\n    const range: RawTimeRange = {\r\n      ...nextRange,\r\n    };\r\n    this.setState({ range }, () => this.onSubmit());\r\n  };\r\n\r\n  onClickClear = () => {\r\n    this.queryExpressions = [''];\r\n    this.setState(\r\n      prevState => ({\r\n        queries: ensureQueries(),\r\n        queryTransactions: [],\r\n        showingStartPage: Boolean(prevState.StartPage),\r\n      }),\r\n      this.saveState\r\n    );\r\n  };\r\n\r\n  onClickCloseSplit = () => {\r\n    const { onChangeSplit } = this.props;\r\n    if (onChangeSplit) {\r\n      onChangeSplit(false);\r\n    }\r\n  };\r\n\r\n  onClickGraphButton = () => {\r\n    this.setState(\r\n      state => {\r\n        const showingGraph = !state.showingGraph;\r\n        let nextQueryTransactions = state.queryTransactions;\r\n        if (!showingGraph) {\r\n          // Discard transactions related to Graph query\r\n          nextQueryTransactions = state.queryTransactions.filter(qt => qt.resultType !== 'Graph');\r\n        }\r\n        return { queryTransactions: nextQueryTransactions, showingGraph };\r\n      },\r\n      () => {\r\n        if (this.state.showingGraph) {\r\n          this.onSubmit();\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  onClickLogsButton = () => {\r\n    this.setState(\r\n      state => {\r\n        const showingLogs = !state.showingLogs;\r\n        let nextQueryTransactions = state.queryTransactions;\r\n        if (!showingLogs) {\r\n          // Discard transactions related to Logs query\r\n          nextQueryTransactions = state.queryTransactions.filter(qt => qt.resultType !== 'Logs');\r\n        }\r\n        return { queryTransactions: nextQueryTransactions, showingLogs };\r\n      },\r\n      () => {\r\n        if (this.state.showingLogs) {\r\n          this.onSubmit();\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  // Use this in help pages to set page to a single query\r\n  onClickQuery = query => {\r\n    const nextQueries = [{ query, key: generateQueryKey() }];\r\n    this.queryExpressions = nextQueries.map(q => q.query);\r\n    this.setState({ queries: nextQueries }, this.onSubmit);\r\n  };\r\n\r\n  onClickSplit = () => {\r\n    const { onChangeSplit } = this.props;\r\n    if (onChangeSplit) {\r\n      const state = this.cloneState();\r\n      onChangeSplit(true, state);\r\n    }\r\n  };\r\n\r\n  onClickTableButton = () => {\r\n    this.setState(\r\n      state => {\r\n        const showingTable = !state.showingTable;\r\n        let nextQueryTransactions = state.queryTransactions;\r\n        if (!showingTable) {\r\n          // Discard transactions related to Table query\r\n          nextQueryTransactions = state.queryTransactions.filter(qt => qt.resultType !== 'Table');\r\n        }\r\n        return { queryTransactions: nextQueryTransactions, showingTable };\r\n      },\r\n      () => {\r\n        if (this.state.showingTable) {\r\n          this.onSubmit();\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  onClickTableCell = (columnKey: string, rowValue: string) => {\r\n    this.onModifyQueries({ type: 'ADD_FILTER', key: columnKey, value: rowValue });\r\n  };\r\n\r\n  onModifyQueries = (action, index?: number) => {\r\n    const { datasource } = this.state;\r\n    if (datasource && datasource.modifyQuery) {\r\n      const preventSubmit = action.preventSubmit;\r\n      this.setState(\r\n        state => {\r\n          const { queries, queryTransactions } = state;\r\n          let nextQueries;\r\n          let nextQueryTransactions;\r\n          if (index === undefined) {\r\n            // Modify all queries\r\n            nextQueries = queries.map((q, i) => ({\r\n              key: generateQueryKey(i),\r\n              query: datasource.modifyQuery(this.queryExpressions[i], action),\r\n            }));\r\n            // Discard all ongoing transactions\r\n            nextQueryTransactions = [];\r\n          } else {\r\n            // Modify query only at index\r\n            nextQueries = queries.map((q, i) => {\r\n              // Synchronise all queries with local query cache to ensure consistency\r\n              q.query = this.queryExpressions[i];\r\n              return i === index\r\n                ? {\r\n                    key: generateQueryKey(index),\r\n                    query: datasource.modifyQuery(q.query, action),\r\n                  }\r\n                : q;\r\n            });\r\n            nextQueryTransactions = queryTransactions\r\n              // Consume the hint corresponding to the action\r\n              .map(qt => {\r\n                if (qt.hints != null && qt.rowIndex === index) {\r\n                  qt.hints = qt.hints.filter(hint => hint.fix.action !== action);\r\n                }\r\n                return qt;\r\n              })\r\n              // Preserve previous row query transaction to keep results visible if next query is incomplete\r\n              .filter(qt => preventSubmit || qt.rowIndex !== index);\r\n          }\r\n          this.queryExpressions = nextQueries.map(q => q.query);\r\n          return {\r\n            queries: nextQueries,\r\n            queryTransactions: nextQueryTransactions,\r\n          };\r\n        },\r\n        // Accepting certain fixes do not result in a well-formed query which should not be submitted\r\n        !preventSubmit ? () => this.onSubmit() : null\r\n      );\r\n    }\r\n  };\r\n\r\n  onRemoveQueryRow = index => {\r\n    // Remove from local cache\r\n    this.queryExpressions = [...this.queryExpressions.slice(0, index), ...this.queryExpressions.slice(index + 1)];\r\n\r\n    this.setState(\r\n      state => {\r\n        const { queries, queryTransactions } = state;\r\n        if (queries.length <= 1) {\r\n          return null;\r\n        }\r\n        // Remove row from react state\r\n        const nextQueries = [...queries.slice(0, index), ...queries.slice(index + 1)];\r\n\r\n        // Discard transactions related to row query\r\n        const nextQueryTransactions = queryTransactions.filter(qt => qt.rowIndex !== index);\r\n\r\n        return {\r\n          queries: nextQueries,\r\n          queryTransactions: nextQueryTransactions,\r\n        };\r\n      },\r\n      () => this.onSubmit()\r\n    );\r\n  };\r\n\r\n  onSubmit = () => {\r\n    const { showingLogs, showingGraph, showingTable, supportsGraph, supportsLogs, supportsTable } = this.state;\r\n    if (showingTable && supportsTable) {\r\n      this.runTableQuery();\r\n    }\r\n    if (showingGraph && supportsGraph) {\r\n      this.runGraphQueries();\r\n    }\r\n    if (showingLogs && supportsLogs) {\r\n      this.runLogsQuery();\r\n    }\r\n    this.saveState();\r\n  };\r\n\r\n  buildQueryOptions(\r\n    query: string,\r\n    rowIndex: number,\r\n    targetOptions: { format: string; hinting?: boolean; instant?: boolean }\r\n  ) {\r\n    const { datasource, range } = this.state;\r\n    const { interval, intervalMs } = getIntervals(range, datasource, this.el.offsetWidth);\r\n    const targets = [\r\n      {\r\n        ...targetOptions,\r\n        // Target identifier is needed for table transformations\r\n        refId: rowIndex + 1,\r\n        expr: query,\r\n      },\r\n    ];\r\n\r\n    // Clone range for query request\r\n    const queryRange: RawTimeRange = { ...range };\r\n\r\n    return {\r\n      interval,\r\n      intervalMs,\r\n      targets,\r\n      range: queryRange,\r\n    };\r\n  }\r\n\r\n  startQueryTransaction(query: string, rowIndex: number, resultType: ResultType, options: any): QueryTransaction {\r\n    const queryOptions = this.buildQueryOptions(query, rowIndex, options);\r\n    const transaction: QueryTransaction = {\r\n      query,\r\n      resultType,\r\n      rowIndex,\r\n      id: generateQueryKey(),\r\n      done: false,\r\n      latency: 0,\r\n      options: queryOptions,\r\n    };\r\n\r\n    // Using updater style because we might be modifying queryTransactions in quick succession\r\n    this.setState(state => {\r\n      const { queryTransactions } = state;\r\n      // Discarding existing transactions of same type\r\n      const remainingTransactions = queryTransactions.filter(\r\n        qt => !(qt.resultType === resultType && qt.rowIndex === rowIndex)\r\n      );\r\n\r\n      // Append new transaction\r\n      const nextQueryTransactions = [...remainingTransactions, transaction];\r\n\r\n      return {\r\n        queryTransactions: nextQueryTransactions,\r\n        showingStartPage: false,\r\n      };\r\n    });\r\n\r\n    return transaction;\r\n  }\r\n\r\n  completeQueryTransaction(\r\n    transactionId: string,\r\n    result: any,\r\n    latency: number,\r\n    queries: string[],\r\n    datasourceId: string\r\n  ) {\r\n    const { datasource } = this.state;\r\n    if (datasource.meta.id !== datasourceId) {\r\n      // Navigated away, queries did not matter\r\n      return;\r\n    }\r\n\r\n    this.setState(state => {\r\n      const { history, queryTransactions } = state;\r\n\r\n      // Transaction might have been discarded\r\n      const transaction = queryTransactions.find(qt => qt.id === transactionId);\r\n      if (!transaction) {\r\n        return null;\r\n      }\r\n\r\n      // Get query hints\r\n      let hints;\r\n      if (datasource.getQueryHints) {\r\n        hints = datasource.getQueryHints(transaction.query, result);\r\n      }\r\n\r\n      // Mark transactions as complete\r\n      const nextQueryTransactions = queryTransactions.map(qt => {\r\n        if (qt.id === transactionId) {\r\n          return {\r\n            ...qt,\r\n            hints,\r\n            latency,\r\n            result,\r\n            done: true,\r\n          };\r\n        }\r\n        return qt;\r\n      });\r\n\r\n      const nextHistory = updateHistory(history, datasourceId, queries);\r\n\r\n      return {\r\n        history: nextHistory,\r\n        queryTransactions: nextQueryTransactions,\r\n      };\r\n    });\r\n  }\r\n\r\n  discardTransactions(rowIndex: number) {\r\n    this.setState(state => {\r\n      const remainingTransactions = state.queryTransactions.filter(qt => qt.rowIndex !== rowIndex);\r\n      return { queryTransactions: remainingTransactions };\r\n    });\r\n  }\r\n\r\n  failQueryTransaction(transactionId: string, response: any, datasourceId: string) {\r\n    const { datasource } = this.state;\r\n    if (datasource.meta.id !== datasourceId) {\r\n      // Navigated away, queries did not matter\r\n      return;\r\n    }\r\n\r\n    console.error(response);\r\n\r\n    let error: string | JSX.Element = response;\r\n    if (response.data) {\r\n      error = response.data.error;\r\n      if (response.data.response) {\r\n        error = (\r\n          <>\r\n            <span>{response.data.error}</span>\r\n            <details>{response.data.response}</details>\r\n          </>\r\n        );\r\n      }\r\n    }\r\n\r\n    this.setState(state => {\r\n      // Transaction might have been discarded\r\n      if (!state.queryTransactions.find(qt => qt.id === transactionId)) {\r\n        return null;\r\n      }\r\n\r\n      // Mark transactions as complete\r\n      const nextQueryTransactions = state.queryTransactions.map(qt => {\r\n        if (qt.id === transactionId) {\r\n          return {\r\n            ...qt,\r\n            error,\r\n            done: true,\r\n          };\r\n        }\r\n        return qt;\r\n      });\r\n\r\n      return {\r\n        queryTransactions: nextQueryTransactions,\r\n      };\r\n    });\r\n  }\r\n\r\n  async runGraphQueries() {\r\n    const queries = [...this.queryExpressions];\r\n    if (!hasQuery(queries)) {\r\n      return;\r\n    }\r\n    const { datasource } = this.state;\r\n    const datasourceId = datasource.meta.id;\r\n    // Run all queries concurrently\r\n    queries.forEach(async (query, rowIndex) => {\r\n      if (query) {\r\n        const transaction = this.startQueryTransaction(query, rowIndex, 'Graph', {\r\n          format: 'time_series',\r\n          instant: false,\r\n        });\r\n        try {\r\n          const now = Date.now();\r\n          const res = await datasource.query(transaction.options);\r\n          const latency = Date.now() - now;\r\n          const results = makeTimeSeriesList(res.data, transaction.options);\r\n          this.completeQueryTransaction(transaction.id, results, latency, queries, datasourceId);\r\n          this.setState({ graphRange: transaction.options.range });\r\n        } catch (response) {\r\n          this.failQueryTransaction(transaction.id, response, datasourceId);\r\n        }\r\n      } else {\r\n        this.discardTransactions(rowIndex);\r\n      }\r\n    });\r\n  }\r\n\r\n  async runTableQuery() {\r\n    const queries = [...this.queryExpressions];\r\n    if (!hasQuery(queries)) {\r\n      return;\r\n    }\r\n    const { datasource } = this.state;\r\n    const datasourceId = datasource.meta.id;\r\n    // Run all queries concurrently\r\n    queries.forEach(async (query, rowIndex) => {\r\n      if (query) {\r\n        const transaction = this.startQueryTransaction(query, rowIndex, 'Table', {\r\n          format: 'table',\r\n          instant: true,\r\n          valueWithRefId: true,\r\n        });\r\n        try {\r\n          const now = Date.now();\r\n          const res = await datasource.query(transaction.options);\r\n          const latency = Date.now() - now;\r\n          const results = res.data[0];\r\n          this.completeQueryTransaction(transaction.id, results, latency, queries, datasourceId);\r\n        } catch (response) {\r\n          this.failQueryTransaction(transaction.id, response, datasourceId);\r\n        }\r\n      } else {\r\n        this.discardTransactions(rowIndex);\r\n      }\r\n    });\r\n  }\r\n\r\n  async runLogsQuery() {\r\n    const queries = [...this.queryExpressions];\r\n    if (!hasQuery(queries)) {\r\n      return;\r\n    }\r\n    const { datasource } = this.state;\r\n    const datasourceId = datasource.meta.id;\r\n    // Run all queries concurrently\r\n    queries.forEach(async (query, rowIndex) => {\r\n      if (query) {\r\n        const transaction = this.startQueryTransaction(query, rowIndex, 'Logs', { format: 'logs' });\r\n        try {\r\n          const now = Date.now();\r\n          const res = await datasource.query(transaction.options);\r\n          const latency = Date.now() - now;\r\n          const results = res.data;\r\n          this.completeQueryTransaction(transaction.id, results, latency, queries, datasourceId);\r\n        } catch (response) {\r\n          this.failQueryTransaction(transaction.id, response, datasourceId);\r\n        }\r\n      } else {\r\n        this.discardTransactions(rowIndex);\r\n      }\r\n    });\r\n  }\r\n\r\n  cloneState(): ExploreState {\r\n    // Copy state, but copy queries including modifications\r\n    return {\r\n      ...this.state,\r\n      queryTransactions: [],\r\n      queries: ensureQueries(this.queryExpressions.map(query => ({ query }))),\r\n    };\r\n  }\r\n\r\n  saveState = () => {\r\n    const { stateKey, onSaveState } = this.props;\r\n    onSaveState(stateKey, this.cloneState());\r\n  };\r\n\r\n  render() {\r\n    const { position, split } = this.props;\r\n    const {\r\n      StartPage,\r\n      datasource,\r\n      datasourceError,\r\n      datasourceLoading,\r\n      datasourceMissing,\r\n      exploreDatasources,\r\n      graphRange,\r\n      history,\r\n      queries,\r\n      queryTransactions,\r\n      range,\r\n      showingGraph,\r\n      showingLogs,\r\n      showingStartPage,\r\n      showingTable,\r\n      supportsGraph,\r\n      supportsLogs,\r\n      supportsTable,\r\n    } = this.state;\r\n    const graphHeight = showingGraph && showingTable ? '200px' : '400px';\r\n    const exploreClass = split ? 'explore explore-split' : 'explore';\r\n    const selectedDatasource = datasource ? exploreDatasources.find(d => d.label === datasource.name) : undefined;\r\n    const graphRangeIntervals = getIntervals(graphRange, datasource, this.el ? this.el.offsetWidth : 0);\r\n    const graphLoading = queryTransactions.some(qt => qt.resultType === 'Graph' && !qt.done);\r\n    const tableLoading = queryTransactions.some(qt => qt.resultType === 'Table' && !qt.done);\r\n    const logsLoading = queryTransactions.some(qt => qt.resultType === 'Logs' && !qt.done);\r\n    // TODO don't recreate those on each re-render\r\n    const graphResult = _.flatten(\r\n      queryTransactions.filter(qt => qt.resultType === 'Graph' && qt.done && qt.result).map(qt => qt.result)\r\n    );\r\n    const tableResult = mergeTablesIntoModel(\r\n      new TableModel(),\r\n      ...queryTransactions.filter(qt => qt.resultType === 'Table' && qt.done && qt.result).map(qt => qt.result)\r\n    );\r\n    const logsResult =\r\n      datasource && datasource.mergeStreams\r\n        ? datasource.mergeStreams(\r\n            _.flatten(\r\n              queryTransactions.filter(qt => qt.resultType === 'Logs' && qt.done && qt.result).map(qt => qt.result)\r\n            ),\r\n            graphRangeIntervals.intervalMs\r\n          )\r\n        : undefined;\r\n    const loading = queryTransactions.some(qt => !qt.done);\r\n\r\n    return (\r\n      <div className={exploreClass} ref={this.getRef}>\r\n        <div className=\"navbar\">\r\n          {position === 'left' ? (\r\n            <div>\r\n              <a className=\"navbar-page-btn\">\r\n                <i className=\"fa fa-rocket\" />\r\n                Explore\r\n              </a>\r\n            </div>\r\n          ) : (\r\n            <div className=\"navbar-buttons explore-first-button\">\r\n              <button className=\"btn navbar-button\" onClick={this.onClickCloseSplit}>\r\n                Close Split\r\n              </button>\r\n            </div>\r\n          )}\r\n          {!datasourceMissing ? (\r\n            <div className=\"navbar-buttons\">\r\n              <Select\r\n                classNamePrefix={`gf-form-select-box`}\r\n                isMulti={false}\r\n                isLoading={datasourceLoading}\r\n                isClearable={false}\r\n                className=\"gf-form-input gf-form-input--form-dropdown datasource-picker\"\r\n                onChange={this.onChangeDatasource}\r\n                options={exploreDatasources}\r\n                styles={ResetStyles}\r\n                placeholder=\"Select datasource\"\r\n                loadingMessage={() => 'Loading datasources...'}\r\n                noOptionsMessage={() => 'No datasources found'}\r\n                value={selectedDatasource}\r\n                components={{\r\n                  Option: PickerOption,\r\n                  IndicatorsContainer,\r\n                  NoOptionsMessage,\r\n                }}\r\n              />\r\n            </div>\r\n          ) : null}\r\n          <div className=\"navbar__spacer\" />\r\n          {position === 'left' && !split ? (\r\n            <div className=\"navbar-buttons\">\r\n              <button className=\"btn navbar-button\" onClick={this.onClickSplit}>\r\n                Split\r\n              </button>\r\n            </div>\r\n          ) : null}\r\n          <TimePicker range={range} onChangeTime={this.onChangeTime} />\r\n          <div className=\"navbar-buttons\">\r\n            <button className=\"btn navbar-button navbar-button--no-icon\" onClick={this.onClickClear}>\r\n              Clear All\r\n            </button>\r\n          </div>\r\n          <div className=\"navbar-buttons relative\">\r\n            <button className=\"btn navbar-button--primary\" onClick={this.onSubmit}>\r\n              Run Query{' '}\r\n              {loading ? <i className=\"fa fa-spinner fa-spin run-icon\" /> : <i className=\"fa fa-level-down run-icon\" />}\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {datasourceLoading ? <div className=\"explore-container\">Loading datasource...</div> : null}\r\n\r\n        {datasourceMissing ? (\r\n          <div className=\"explore-container\">Please add a datasource that supports Explore (e.g., Prometheus).</div>\r\n        ) : null}\r\n\r\n        {datasourceError ? (\r\n          <div className=\"explore-container\">Error connecting to datasource. [{datasourceError}]</div>\r\n        ) : null}\r\n\r\n        {datasource && !datasourceError ? (\r\n          <div className=\"explore-container\">\r\n            <QueryRows\r\n              datasource={datasource}\r\n              history={history}\r\n              queries={queries}\r\n              onAddQueryRow={this.onAddQueryRow}\r\n              onChangeQuery={this.onChangeQuery}\r\n              onClickHintFix={this.onModifyQueries}\r\n              onExecuteQuery={this.onSubmit}\r\n              onRemoveQueryRow={this.onRemoveQueryRow}\r\n              transactions={queryTransactions}\r\n            />\r\n            <main className=\"m-t-2\">\r\n              <ErrorBoundary>\r\n                {showingStartPage && <StartPage onClickQuery={this.onClickQuery} />}\r\n                {!showingStartPage && (\r\n                  <>\r\n                    {supportsGraph && (\r\n                      <Panel\r\n                        label=\"Graph\"\r\n                        isOpen={showingGraph}\r\n                        loading={graphLoading}\r\n                        onToggle={this.onClickGraphButton}\r\n                      >\r\n                        <Graph\r\n                          data={graphResult}\r\n                          height={graphHeight}\r\n                          id={`explore-graph-${position}`}\r\n                          onChangeTime={this.onChangeTime}\r\n                          range={graphRange}\r\n                          split={split}\r\n                        />\r\n                      </Panel>\r\n                    )}\r\n                    {supportsTable && (\r\n                      <Panel\r\n                        label=\"Table\"\r\n                        loading={tableLoading}\r\n                        isOpen={showingTable}\r\n                        onToggle={this.onClickTableButton}\r\n                      >\r\n                        <Table data={tableResult} loading={tableLoading} onClickCell={this.onClickTableCell} />\r\n                      </Panel>\r\n                    )}\r\n                    {supportsLogs && (\r\n                      <Panel label=\"Logs\" loading={logsLoading} isOpen={showingLogs} onToggle={this.onClickLogsButton}>\r\n                        <Logs\r\n                          data={logsResult}\r\n                          loading={logsLoading}\r\n                          position={position}\r\n                          onChangeTime={this.onChangeTime}\r\n                          range={range}\r\n                        />\r\n                      </Panel>\r\n                    )}\r\n                  </>\r\n                )}\r\n              </ErrorBoundary>\r\n            </main>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default hot(module)(Explore);\r\n","import React, { PureComponent } from 'react';\r\n\r\ninterface Props {\r\n  isOpen: boolean;\r\n  label: string;\r\n  loading?: boolean;\r\n  onToggle: (isOpen: boolean) => void;\r\n}\r\n\r\nexport default class Panel extends PureComponent<Props> {\r\n  onClickToggle = () => this.props.onToggle(!this.props.isOpen);\r\n\r\n  render() {\r\n    const { isOpen, loading } = this.props;\r\n    const iconClass = isOpen ? 'fa fa-caret-up' : 'fa fa-caret-down';\r\n    const loaderClass = loading ? 'explore-panel__loader explore-panel__loader--active' : 'explore-panel__loader';\r\n    return (\r\n      <div className=\"explore-panel panel-container\">\r\n        <div className=\"explore-panel__header\" onClick={this.onClickToggle}>\r\n          <div className=\"explore-panel__header-buttons\">\r\n            <span className={iconClass} />\r\n          </div>\r\n          <div className=\"explore-panel__header-label\">{this.props.label}</div>\r\n        </div>\r\n        {isOpen && (\r\n          <div className=\"explore-panel__body\">\r\n            <div className={loaderClass} />\r\n            {this.props.children}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import _ from 'lodash';\r\nimport React, { PureComponent } from 'react';\r\nimport ReactTable from 'react-table';\r\n\r\nimport TableModel from 'app/core/table_model';\r\n\r\nconst EMPTY_TABLE = new TableModel();\r\n// Identify columns that contain values\r\nconst VALUE_REGEX = /^[Vv]alue #\\d+/;\r\n\r\ninterface TableProps {\r\n  data: TableModel;\r\n  loading: boolean;\r\n  onClickCell?: (columnKey: string, rowValue: string) => void;\r\n}\r\n\r\nfunction prepareRows(rows, columnNames) {\r\n  return rows.map(cells => _.zipObject(columnNames, cells));\r\n}\r\n\r\nexport default class Table extends PureComponent<TableProps> {\r\n  getCellProps = (state, rowInfo, column) => {\r\n    return {\r\n      onClick: (e: React.SyntheticEvent) => {\r\n        // Only handle click on link, not the cell\r\n        if (e.target) {\r\n          const link = e.target as HTMLElement;\r\n          if (link.className === 'link') {\r\n            const columnKey = column.Header;\r\n            const rowValue = rowInfo.row[columnKey];\r\n            this.props.onClickCell(columnKey, rowValue);\r\n          }\r\n        }\r\n      },\r\n    };\r\n  };\r\n\r\n  render() {\r\n    const { data, loading } = this.props;\r\n    const tableModel = data || EMPTY_TABLE;\r\n    const columnNames = tableModel.columns.map(({ text }) => text);\r\n    const columns = tableModel.columns.map(({ filterable, text }) => ({\r\n      Header: text,\r\n      accessor: text,\r\n      className: VALUE_REGEX.test(text) ? 'text-right' : '',\r\n      show: text !== 'Time',\r\n      Cell: row => <span className={filterable ? 'link' : ''}>{row.value}</span>,\r\n    }));\r\n    const noDataText = data ? 'The queries returned no data for a table.' : '';\r\n\r\n    return (\r\n      <ReactTable\r\n        columns={columns}\r\n        data={tableModel.rows}\r\n        getTdProps={this.getCellProps}\r\n        loading={loading}\r\n        minRows={0}\r\n        noDataText={noDataText}\r\n        resolveData={data => prepareRows(data, columnNames)}\r\n        showPagination={Boolean(data)}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from 'react';\r\nimport moment from 'moment';\r\n\r\nimport * as dateMath from 'app/core/utils/datemath';\r\nimport * as rangeUtil from 'app/core/utils/rangeutil';\r\nimport { RawTimeRange } from 'app/types/series';\r\n\r\nconst DATE_FORMAT = 'YYYY-MM-DD HH:mm:ss';\r\nexport const DEFAULT_RANGE = {\r\n  from: 'now-6h',\r\n  to: 'now',\r\n};\r\n\r\n/**\r\n * Return a human-editable string of either relative (inludes \"now\") or absolute local time (in the shape of DATE_FORMAT).\r\n * @param value Epoch or relative time\r\n */\r\nexport function parseTime(value: string, isUtc = false): string {\r\n  if (moment.isMoment(value)) {\r\n    return value;\r\n  }\r\n  if (value.indexOf('now') !== -1) {\r\n    return value;\r\n  }\r\n  let time: any = value;\r\n  // Possible epoch\r\n  if (!isNaN(time)) {\r\n    time = parseInt(time, 10);\r\n  }\r\n  time = isUtc ? moment.utc(time) : moment(time);\r\n  return time.format(DATE_FORMAT);\r\n}\r\n\r\ninterface TimePickerProps {\r\n  isOpen?: boolean;\r\n  isUtc?: boolean;\r\n  range?: RawTimeRange;\r\n  onChangeTime?: (Range) => void;\r\n}\r\n\r\ninterface TimePickerState {\r\n  isOpen: boolean;\r\n  isUtc: boolean;\r\n  rangeString: string;\r\n  refreshInterval?: string;\r\n  initialRange?: RawTimeRange;\r\n\r\n  // Input-controlled text, keep these in a shape that is human-editable\r\n  fromRaw: string;\r\n  toRaw: string;\r\n}\r\n\r\nexport default class TimePicker extends PureComponent<TimePickerProps, TimePickerState> {\r\n  dropdownEl: any;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isOpen: props.isOpen,\r\n      isUtc: props.isUtc,\r\n      rangeString: '',\r\n      fromRaw: '',\r\n      toRaw: '',\r\n      initialRange: DEFAULT_RANGE,\r\n      refreshInterval: '',\r\n    };\r\n  }\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    if (state.initialRange && state.initialRange === props.range) {\r\n      return state;\r\n    }\r\n\r\n    const from = props.range ? props.range.from : DEFAULT_RANGE.from;\r\n    const to = props.range ? props.range.to : DEFAULT_RANGE.to;\r\n\r\n    // Ensure internal format\r\n    const fromRaw = parseTime(from, props.isUtc);\r\n    const toRaw = parseTime(to, props.isUtc);\r\n    const range = {\r\n      from: fromRaw,\r\n      to: toRaw,\r\n    };\r\n\r\n    return {\r\n      ...state,\r\n      fromRaw,\r\n      toRaw,\r\n      initialRange: props.range,\r\n      rangeString: rangeUtil.describeTimeRange(range),\r\n    };\r\n  }\r\n\r\n  move(direction: number) {\r\n    const { onChangeTime } = this.props;\r\n    const { fromRaw, toRaw } = this.state;\r\n    const from = dateMath.parse(fromRaw, false);\r\n    const to = dateMath.parse(toRaw, true);\r\n    const timespan = (to.valueOf() - from.valueOf()) / 2;\r\n\r\n    let nextTo, nextFrom;\r\n    if (direction === -1) {\r\n      nextTo = to.valueOf() - timespan;\r\n      nextFrom = from.valueOf() - timespan;\r\n    } else if (direction === 1) {\r\n      nextTo = to.valueOf() + timespan;\r\n      nextFrom = from.valueOf() + timespan;\r\n      if (nextTo > Date.now() && to < Date.now()) {\r\n        nextTo = Date.now();\r\n        nextFrom = from.valueOf();\r\n      }\r\n    } else {\r\n      nextTo = to.valueOf();\r\n      nextFrom = from.valueOf();\r\n    }\r\n\r\n    const nextRange = {\r\n      from: moment(nextFrom),\r\n      to: moment(nextTo),\r\n    };\r\n\r\n    this.setState(\r\n      {\r\n        rangeString: rangeUtil.describeTimeRange(nextRange),\r\n        fromRaw: nextRange.from.format(DATE_FORMAT),\r\n        toRaw: nextRange.to.format(DATE_FORMAT),\r\n      },\r\n      () => {\r\n        onChangeTime(nextRange);\r\n      }\r\n    );\r\n  }\r\n\r\n  handleChangeFrom = e => {\r\n    this.setState({\r\n      fromRaw: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleChangeTo = e => {\r\n    this.setState({\r\n      toRaw: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleClickApply = () => {\r\n    const { onChangeTime } = this.props;\r\n    let range;\r\n    this.setState(\r\n      state => {\r\n        const { toRaw, fromRaw } = this.state;\r\n        range = {\r\n          from: dateMath.parse(fromRaw, false),\r\n          to: dateMath.parse(toRaw, true),\r\n        };\r\n        const rangeString = rangeUtil.describeTimeRange(range);\r\n        return {\r\n          isOpen: false,\r\n          rangeString,\r\n        };\r\n      },\r\n      () => {\r\n        if (onChangeTime) {\r\n          onChangeTime(range);\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  handleClickLeft = () => this.move(-1);\r\n  handleClickPicker = () => {\r\n    this.setState(state => ({\r\n      isOpen: !state.isOpen,\r\n    }));\r\n  };\r\n  handleClickRight = () => this.move(1);\r\n  handleClickRefresh = () => {};\r\n  handleClickRelativeOption = range => {\r\n    const { onChangeTime } = this.props;\r\n    const rangeString = rangeUtil.describeTimeRange(range);\r\n    this.setState(\r\n      {\r\n        toRaw: range.to,\r\n        fromRaw: range.from,\r\n        isOpen: false,\r\n        rangeString,\r\n      },\r\n      () => {\r\n        if (onChangeTime) {\r\n          onChangeTime(range);\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  getTimeOptions() {\r\n    return rangeUtil.getRelativeTimesList({}, this.state.rangeString);\r\n  }\r\n\r\n  dropdownRef = el => {\r\n    this.dropdownEl = el;\r\n  };\r\n\r\n  renderDropdown() {\r\n    const { fromRaw, isOpen, toRaw } = this.state;\r\n    if (!isOpen) {\r\n      return null;\r\n    }\r\n    const timeOptions = this.getTimeOptions();\r\n    return (\r\n      <div ref={this.dropdownRef} className=\"gf-timepicker-dropdown\">\r\n        <div className=\"gf-timepicker-absolute-section\">\r\n          <h3 className=\"section-heading\">Custom range</h3>\r\n\r\n          <label className=\"small\">From:</label>\r\n          <div className=\"gf-form-inline\">\r\n            <div className=\"gf-form max-width-28\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"gf-form-input input-large timepicker-from\"\r\n                value={fromRaw}\r\n                onChange={this.handleChangeFrom}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <label className=\"small\">To:</label>\r\n          <div className=\"gf-form-inline\">\r\n            <div className=\"gf-form max-width-28\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"gf-form-input input-large timepicker-to\"\r\n                value={toRaw}\r\n                onChange={this.handleChangeTo}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* <label className=\"small\">Refreshing every:</label>\r\n          <div className=\"gf-form-inline\">\r\n            <div className=\"gf-form max-width-28\">\r\n              <select className=\"gf-form-input input-medium\" ng-options=\"f.value as f.text for f in ctrl.refresh.options\"></select>\r\n            </div>\r\n          </div> */}\r\n          <div className=\"gf-form\">\r\n            <button className=\"btn gf-form-btn btn-secondary\" onClick={this.handleClickApply}>\r\n              Apply\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"gf-timepicker-relative-section\">\r\n          <h3 className=\"section-heading\">Quick ranges</h3>\r\n          {Object.keys(timeOptions).map(section => {\r\n            const group = timeOptions[section];\r\n            return (\r\n              <ul key={section}>\r\n                {group.map(option => (\r\n                  <li className={option.active ? 'active' : ''} key={option.display}>\r\n                    <a onClick={() => this.handleClickRelativeOption(option)}>{option.display}</a>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { isUtc, rangeString, refreshInterval } = this.state;\r\n    return (\r\n      <div className=\"timepicker\">\r\n        <div className=\"navbar-buttons\">\r\n          <button className=\"btn navbar-button navbar-button--tight timepicker-left\" onClick={this.handleClickLeft}>\r\n            <i className=\"fa fa-chevron-left\" />\r\n          </button>\r\n          <button className=\"btn navbar-button gf-timepicker-nav-btn\" onClick={this.handleClickPicker}>\r\n            <i className=\"fa fa-clock-o\" />\r\n            <span className=\"timepicker-rangestring\">{rangeString}</span>\r\n            {isUtc ? <span className=\"gf-timepicker-utc\">UTC</span> : null}\r\n            {refreshInterval ? <span className=\"text-warning\">&nbsp; Refresh every {refreshInterval}</span> : null}\r\n          </button>\r\n          <button className=\"btn navbar-button navbar-button--tight timepicker-right\" onClick={this.handleClickRight}>\r\n            <i className=\"fa fa-chevron-right\" />\r\n          </button>\r\n        </div>\r\n        {this.renderDropdown()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { Query } from 'app/types/explore';\r\n\r\nexport function generateQueryKey(index = 0): string {\r\n  return `Q-${Date.now()}-${Math.random()}-${index}`;\r\n}\r\n\r\nexport function ensureQueries(queries?: Query[]): Query[] {\r\n  if (queries && typeof queries === 'object' && queries.length > 0 && typeof queries[0].query === 'string') {\r\n    return queries.map(({ query }, i) => ({ key: generateQueryKey(i), query }));\r\n  }\r\n  return [{ key: generateQueryKey(), query: '' }];\r\n}\r\n\r\nexport function hasQuery(queries: string[]): boolean {\r\n  return queries.some(q => Boolean(q));\r\n}\r\n","import React, { PureComponent } from 'react';\r\n\r\nconst INTERVAL = 150;\r\n\r\nexport default class ElapsedTime extends PureComponent<any, any> {\r\n  offset: number;\r\n  timer: number;\r\n\r\n  state = {\r\n    elapsed: 0,\r\n  };\r\n\r\n  start() {\r\n    this.offset = Date.now();\r\n    this.timer = window.setInterval(this.tick, INTERVAL);\r\n  }\r\n\r\n  tick = () => {\r\n    const jetzt = Date.now();\r\n    const elapsed = jetzt - this.offset;\r\n    this.setState({ elapsed });\r\n  };\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.time) {\r\n      clearInterval(this.timer);\r\n    } else if (this.props.time) {\r\n      this.start();\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.start();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timer);\r\n  }\r\n\r\n  render() {\r\n    const { elapsed } = this.state;\r\n    const { className, time } = this.props;\r\n    const value = (time || elapsed) / 1000;\r\n    return <span className={`elapsed-time ${className}`}>{value.toFixed(1)}s</span>;\r\n  }\r\n}\r\n","import React, { PureComponent } from 'react';\r\n\r\nimport { QueryTransaction } from 'app/types/explore';\r\nimport ElapsedTime from './ElapsedTime';\r\n\r\nfunction formatLatency(value) {\r\n  return `${(value / 1000).toFixed(1)}s`;\r\n}\r\n\r\ninterface QueryTransactionStatusItemProps {\r\n  transaction: QueryTransaction;\r\n}\r\n\r\nclass QueryTransactionStatusItem extends PureComponent<QueryTransactionStatusItemProps> {\r\n  render() {\r\n    const { transaction } = this.props;\r\n    const className = transaction.done ? 'query-transaction' : 'query-transaction query-transaction--loading';\r\n    return (\r\n      <div className={className}>\r\n        <div className=\"query-transaction__type\">{transaction.resultType}:</div>\r\n        <div className=\"query-transaction__duration\">\r\n          {transaction.done ? formatLatency(transaction.latency) : <ElapsedTime />}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\ninterface QueryTransactionStatusProps {\r\n  transactions: QueryTransaction[];\r\n}\r\n\r\nexport default class QueryTransactionStatus extends PureComponent<QueryTransactionStatusProps> {\r\n  render() {\r\n    const { transactions } = this.props;\r\n    return (\r\n      <div className=\"query-transactions\">\r\n        {transactions.map((t, i) => <QueryTransactionStatusItem key={`${t.query}:${t.resultType}`} transaction={t} />)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from 'react';\r\n\r\nimport { QueryTransaction, HistoryItem, Query, QueryHint } from 'app/types/explore';\r\n\r\nimport DefaultQueryField from './QueryField';\r\nimport QueryTransactionStatus from './QueryTransactionStatus';\r\nimport { DataSource } from 'app/types';\r\n\r\nfunction getFirstHintFromTransactions(transactions: QueryTransaction[]): QueryHint {\r\n  const transaction = transactions.find(qt => qt.hints && qt.hints.length > 0);\r\n  if (transaction) {\r\n    return transaction.hints[0];\r\n  }\r\n  return undefined;\r\n}\r\n\r\ninterface QueryRowEventHandlers {\r\n  onAddQueryRow: (index: number) => void;\r\n  onChangeQuery: (value: string, index: number, override?: boolean) => void;\r\n  onClickHintFix: (action: object, index?: number) => void;\r\n  onExecuteQuery: () => void;\r\n  onRemoveQueryRow: (index: number) => void;\r\n}\r\n\r\ninterface QueryRowCommonProps {\r\n  className?: string;\r\n  datasource: DataSource;\r\n  history: HistoryItem[];\r\n  transactions: QueryTransaction[];\r\n}\r\n\r\ntype QueryRowProps = QueryRowCommonProps &\r\n  QueryRowEventHandlers & {\r\n    index: number;\r\n    query: string;\r\n  };\r\n\r\nclass QueryRow extends PureComponent<QueryRowProps> {\r\n  onChangeQuery = (value, override?: boolean) => {\r\n    const { index, onChangeQuery } = this.props;\r\n    if (onChangeQuery) {\r\n      onChangeQuery(value, index, override);\r\n    }\r\n  };\r\n\r\n  onClickAddButton = () => {\r\n    const { index, onAddQueryRow } = this.props;\r\n    if (onAddQueryRow) {\r\n      onAddQueryRow(index);\r\n    }\r\n  };\r\n\r\n  onClickClearButton = () => {\r\n    this.onChangeQuery('', true);\r\n  };\r\n\r\n  onClickHintFix = action => {\r\n    const { index, onClickHintFix } = this.props;\r\n    if (onClickHintFix) {\r\n      onClickHintFix(action, index);\r\n    }\r\n  };\r\n\r\n  onClickRemoveButton = () => {\r\n    const { index, onRemoveQueryRow } = this.props;\r\n    if (onRemoveQueryRow) {\r\n      onRemoveQueryRow(index);\r\n    }\r\n  };\r\n\r\n  onPressEnter = () => {\r\n    const { onExecuteQuery } = this.props;\r\n    if (onExecuteQuery) {\r\n      onExecuteQuery();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { datasource, history, query, transactions } = this.props;\r\n    const transactionWithError = transactions.find(t => t.error !== undefined);\r\n    const hint = getFirstHintFromTransactions(transactions);\r\n    const queryError = transactionWithError ? transactionWithError.error : null;\r\n    const QueryField = datasource.pluginExports.ExploreQueryField || DefaultQueryField;\r\n    return (\r\n      <div className=\"query-row\">\r\n        <div className=\"query-row-status\">\r\n          <QueryTransactionStatus transactions={transactions} />\r\n        </div>\r\n        <div className=\"query-row-field\">\r\n          <QueryField\r\n            datasource={datasource}\r\n            error={queryError}\r\n            hint={hint}\r\n            initialQuery={query}\r\n            history={history}\r\n            onClickHintFix={this.onClickHintFix}\r\n            onPressEnter={this.onPressEnter}\r\n            onQueryChange={this.onChangeQuery}\r\n          />\r\n        </div>\r\n        <div className=\"query-row-tools\">\r\n          <button className=\"btn navbar-button navbar-button--tight\" onClick={this.onClickClearButton}>\r\n            <i className=\"fa fa-times\" />\r\n          </button>\r\n          <button className=\"btn navbar-button navbar-button--tight\" onClick={this.onClickAddButton}>\r\n            <i className=\"fa fa-plus\" />\r\n          </button>\r\n          <button className=\"btn navbar-button navbar-button--tight\" onClick={this.onClickRemoveButton}>\r\n            <i className=\"fa fa-minus\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\ntype QueryRowsProps = QueryRowCommonProps &\r\n  QueryRowEventHandlers & {\r\n    queries: Query[];\r\n  };\r\n\r\nexport default class QueryRows extends PureComponent<QueryRowsProps> {\r\n  render() {\r\n    const { className = '', queries, transactions, ...handlers } = this.props;\r\n    return (\r\n      <div className={className}>\r\n        {queries.map((q, index) => (\r\n          <QueryRow\r\n            key={q.key}\r\n            index={index}\r\n            query={q.query}\r\n            transactions={transactions.filter(t => t.rowIndex === index)}\r\n            {...handlers}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { TextMatch } from 'app/types/explore';\r\n\r\n/**\r\n * Adapt findMatchesInText for react-highlight-words findChunks handler.\r\n * See https://github.com/bvaughn/react-highlight-words#props\r\n */\r\nexport function findHighlightChunksInText({ searchWords, textToHighlight }) {\r\n  return findMatchesInText(textToHighlight, searchWords.join(' '));\r\n}\r\n\r\n/**\r\n * Returns a list of substring regexp matches.\r\n */\r\nexport function findMatchesInText(haystack: string, needle: string): TextMatch[] {\r\n  // Empty search can send re.exec() into infinite loop, exit early\r\n  if (!haystack || !needle) {\r\n    return [];\r\n  }\r\n  const regexp = new RegExp(`(?:${needle})`, 'g');\r\n  const matches = [];\r\n  let match = regexp.exec(haystack);\r\n  while (match) {\r\n    matches.push({\r\n      text: match[0],\r\n      start: match.index,\r\n      length: match[0].length,\r\n      end: match.index + match[0].length,\r\n    });\r\n    match = regexp.exec(haystack);\r\n  }\r\n  return matches;\r\n}\r\n","import React, { Fragment, PureComponent } from 'react';\r\nimport Highlighter from 'react-highlight-words';\r\n\r\nimport { RawTimeRange } from 'app/types/series';\r\nimport { LogsDedupStrategy, LogsModel, dedupLogRows } from 'app/core/logs_model';\r\nimport { findHighlightChunksInText } from 'app/core/utils/text';\r\nimport { Switch } from 'app/core/components/Switch/Switch';\r\n\r\nimport Graph from './Graph';\r\n\r\nconst graphOptions = {\r\n  series: {\r\n    bars: {\r\n      show: true,\r\n      lineWidth: 5,\r\n      // barWidth: 10,\r\n    },\r\n    // stack: true,\r\n  },\r\n  yaxis: {\r\n    tickDecimals: 0,\r\n  },\r\n};\r\n\r\ninterface LogsProps {\r\n  className?: string;\r\n  data: LogsModel;\r\n  loading: boolean;\r\n  position: string;\r\n  range?: RawTimeRange;\r\n  onChangeTime?: (range: RawTimeRange) => void;\r\n}\r\n\r\ninterface LogsState {\r\n  dedup: LogsDedupStrategy;\r\n  showLabels: boolean;\r\n  showLocalTime: boolean;\r\n  showUtc: boolean;\r\n}\r\n\r\nexport default class Logs extends PureComponent<LogsProps, LogsState> {\r\n  state = {\r\n    dedup: LogsDedupStrategy.none,\r\n    showLabels: true,\r\n    showLocalTime: true,\r\n    showUtc: false,\r\n  };\r\n\r\n  onChangeDedup = (dedup: LogsDedupStrategy) => {\r\n    this.setState(prevState => {\r\n      if (prevState.dedup === dedup) {\r\n        return { dedup: LogsDedupStrategy.none };\r\n      }\r\n      return { dedup };\r\n    });\r\n  };\r\n\r\n  onChangeLabels = (event: React.SyntheticEvent) => {\r\n    const target = event.target as HTMLInputElement;\r\n    this.setState({\r\n      showLabels: target.checked,\r\n    });\r\n  };\r\n\r\n  onChangeLocalTime = (event: React.SyntheticEvent) => {\r\n    const target = event.target as HTMLInputElement;\r\n    this.setState({\r\n      showLocalTime: target.checked,\r\n    });\r\n  };\r\n\r\n  onChangeUtc = (event: React.SyntheticEvent) => {\r\n    const target = event.target as HTMLInputElement;\r\n    this.setState({\r\n      showUtc: target.checked,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { className = '', data, loading = false, position, range } = this.props;\r\n    const { dedup, showLabels, showLocalTime, showUtc } = this.state;\r\n    const hasData = data && data.rows && data.rows.length > 0;\r\n    const dedupedData = dedupLogRows(data, dedup);\r\n    const dedupCount = dedupedData.rows.reduce((sum, row) => sum + row.duplicates, 0);\r\n    const meta = [...data.meta];\r\n    if (dedup !== LogsDedupStrategy.none) {\r\n      meta.push({\r\n        label: 'Dedup count',\r\n        value: String(dedupCount),\r\n      });\r\n    }\r\n    const cssColumnSizes = ['3px']; // Log-level indicator line\r\n    if (showUtc) {\r\n      cssColumnSizes.push('minmax(100px, max-content)');\r\n    }\r\n    if (showLocalTime) {\r\n      cssColumnSizes.push('minmax(100px, max-content)');\r\n    }\r\n    if (showLabels) {\r\n      cssColumnSizes.push('minmax(100px, 25%)');\r\n    }\r\n    cssColumnSizes.push('1fr');\r\n    const logEntriesStyle = {\r\n      gridTemplateColumns: cssColumnSizes.join(' '),\r\n    };\r\n\r\n    return (\r\n      <div className={`${className} logs`}>\r\n        <div className=\"logs-graph\">\r\n          <Graph\r\n            data={data.series}\r\n            height=\"100px\"\r\n            range={range}\r\n            id={`explore-logs-graph-${position}`}\r\n            onChangeTime={this.props.onChangeTime}\r\n            userOptions={graphOptions}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"logs-options\">\r\n          <div className=\"logs-controls\">\r\n            <Switch label=\"Timestamp\" checked={showUtc} onChange={this.onChangeUtc} small />\r\n            <Switch label=\"Local time\" checked={showLocalTime} onChange={this.onChangeLocalTime} small />\r\n            <Switch label=\"Labels\" checked={showLabels} onChange={this.onChangeLabels} small />\r\n            <Switch\r\n              label=\"Dedup: off\"\r\n              checked={dedup === LogsDedupStrategy.none}\r\n              onChange={() => this.onChangeDedup(LogsDedupStrategy.none)}\r\n              small\r\n            />\r\n            <Switch\r\n              label=\"Dedup: exact\"\r\n              checked={dedup === LogsDedupStrategy.exact}\r\n              onChange={() => this.onChangeDedup(LogsDedupStrategy.exact)}\r\n              small\r\n            />\r\n            <Switch\r\n              label=\"Dedup: numbers\"\r\n              checked={dedup === LogsDedupStrategy.numbers}\r\n              onChange={() => this.onChangeDedup(LogsDedupStrategy.numbers)}\r\n              small\r\n            />\r\n            <Switch\r\n              label=\"Dedup: signature\"\r\n              checked={dedup === LogsDedupStrategy.signature}\r\n              onChange={() => this.onChangeDedup(LogsDedupStrategy.signature)}\r\n              small\r\n            />\r\n            {hasData &&\r\n              meta && (\r\n                <div className=\"logs-meta\">\r\n                  {meta.map(item => (\r\n                    <div className=\"logs-meta-item\" key={item.label}>\r\n                      <span className=\"logs-meta-item__label\">{item.label}:</span>\r\n                      <span className=\"logs-meta-item__value\">{item.value}</span>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              )}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"logs-entries\" style={logEntriesStyle}>\r\n          {hasData &&\r\n            dedupedData.rows.map(row => (\r\n              <Fragment key={row.key}>\r\n                <div className={row.logLevel ? `logs-row-level logs-row-level-${row.logLevel}` : ''}>\r\n                  {row.duplicates > 0 && (\r\n                    <div className=\"logs-row-level__duplicates\" title={`${row.duplicates} duplicates`}>\r\n                      {Array.apply(null, { length: row.duplicates }).map(index => (\r\n                        <div className=\"logs-row-level__duplicate\" key={`${index}`} />\r\n                      ))}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                {showUtc && <div title={`Local: ${row.timeLocal} (${row.timeFromNow})`}>{row.timestamp}</div>}\r\n                {showLocalTime && <div title={`${row.timestamp} (${row.timeFromNow})`}>{row.timeLocal}</div>}\r\n                {showLabels && (\r\n                  <div className=\"max-width\" title={row.labels}>\r\n                    {row.labels}\r\n                  </div>\r\n                )}\r\n                <div>\r\n                  <Highlighter\r\n                    textToHighlight={row.entry}\r\n                    searchWords={row.searchWords}\r\n                    findChunks={findHighlightChunksInText}\r\n                    highlightClassName=\"logs-row-match-highlight\"\r\n                  />\r\n                </div>\r\n              </Fragment>\r\n            ))}\r\n        </div>\r\n        {!loading && !hasData && 'No data was returned.'}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { hot } from 'react-hot-loader';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { updateLocation } from 'app/core/actions';\r\nimport { serializeStateToUrlParam, parseUrlState } from 'app/core/utils/explore';\r\nimport { StoreState } from 'app/types';\r\nimport { ExploreState } from 'app/types/explore';\r\n\r\nimport ErrorBoundary from './ErrorBoundary';\r\nimport Explore from './Explore';\r\n\r\ninterface WrapperProps {\r\n  backendSrv?: any;\r\n  datasourceSrv?: any;\r\n  updateLocation: typeof updateLocation;\r\n  urlStates: { [key: string]: string };\r\n}\r\n\r\ninterface WrapperState {\r\n  split: boolean;\r\n  splitState: ExploreState;\r\n}\r\n\r\nconst STATE_KEY_LEFT = 'state';\r\nconst STATE_KEY_RIGHT = 'stateRight';\r\n\r\nexport class Wrapper extends Component<WrapperProps, WrapperState> {\r\n  urlStates: { [key: string]: string };\r\n\r\n  constructor(props: WrapperProps) {\r\n    super(props);\r\n    this.urlStates = props.urlStates;\r\n    this.state = {\r\n      split: Boolean(props.urlStates[STATE_KEY_RIGHT]),\r\n      splitState: undefined,\r\n    };\r\n  }\r\n\r\n  onChangeSplit = (split: boolean, splitState: ExploreState) => {\r\n    this.setState({ split, splitState });\r\n    // When closing split, remove URL state for split part\r\n    if (!split) {\r\n      delete this.urlStates[STATE_KEY_RIGHT];\r\n      this.props.updateLocation({\r\n        query: this.urlStates,\r\n      });\r\n    }\r\n  };\r\n\r\n  onSaveState = (key: string, state: ExploreState) => {\r\n    const urlState = serializeStateToUrlParam(state, true);\r\n    this.urlStates[key] = urlState;\r\n    this.props.updateLocation({\r\n      query: this.urlStates,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { datasourceSrv } = this.props;\r\n    // State overrides for props from first Explore\r\n    const { split, splitState } = this.state;\r\n    const urlStateLeft = parseUrlState(this.urlStates[STATE_KEY_LEFT]);\r\n    const urlStateRight = parseUrlState(this.urlStates[STATE_KEY_RIGHT]);\r\n\r\n    return (\r\n      <div className=\"explore-wrapper\">\r\n        <ErrorBoundary>\r\n          <Explore\r\n            datasourceSrv={datasourceSrv}\r\n            onChangeSplit={this.onChangeSplit}\r\n            onSaveState={this.onSaveState}\r\n            position=\"left\"\r\n            split={split}\r\n            stateKey={STATE_KEY_LEFT}\r\n            urlState={urlStateLeft}\r\n          />\r\n        </ErrorBoundary>\r\n        {split && (\r\n          <ErrorBoundary>\r\n            <Explore\r\n              datasourceSrv={datasourceSrv}\r\n              onChangeSplit={this.onChangeSplit}\r\n              onSaveState={this.onSaveState}\r\n              position=\"right\"\r\n              split={split}\r\n              splitState={splitState}\r\n              stateKey={STATE_KEY_RIGHT}\r\n              urlState={urlStateRight}\r\n            />\r\n          </ErrorBoundary>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: StoreState) => ({\r\n  urlStates: state.location.query,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  updateLocation,\r\n};\r\n\r\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(Wrapper));\r\n"],"sourceRoot":""}