define(["app/plugins/sdk","lodash"],function(n,r){return s={},o.m=i={"../node_modules/css-loader/index.js?!./css/yaw-panel.css":
/*!****************************************************************!*\
  !*** ../node_modules/css-loader??ref--5-1!./css/yaw-panel.css ***!
  \****************************************************************/
/*! no static exports found */function(t,e,n){(t.exports=n(/*! ../../node_modules/css-loader/lib/css-base.js */"../node_modules/css-loader/lib/css-base.js")(!0)).push([t.i,".oge-wind-yaw {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n}\n\n.oge-wind-yaw h4 {\n  line-height: 1.4;\n  text-align: center;\n}\n\n\n.canvas-panel{\n  width: 100%;\n}","",{version:3,sources:["D:/worksoftware/grafana panel/grafana-plugins-new/plugins/oge-wind-yaw/src/css/yaw-panel.css"],names:[],mappings:"AAAA;EACE,cAAc;EACd,oBAAoB;EACpB,wBAAwB;EACxB,uBAAuB;CACxB;;AAED;EACE,iBAAiB;EACjB,mBAAmB;CACpB;;;AAGD;EACE,YAAY;CACb",file:"yaw-panel.css",sourcesContent:[".oge-wind-yaw {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n}\n\n.oge-wind-yaw h4 {\n  line-height: 1.4;\n  text-align: center;\n}\n\n\n.canvas-panel{\n  width: 100%;\n}"],sourceRoot:""}])},"../node_modules/css-loader/lib/css-base.js":
/*!**************************************************!*\
  !*** ../node_modules/css-loader/lib/css-base.js ***!
  \**************************************************/
/*! no static exports found */function(t,e){t.exports=function(n){var s=[];return s.toString=function(){return this.map(function(t){var e=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var o=function(t){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(t))))+" */"}(r),i=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[n].concat(i).concat([o]).join("\n")}return[n].join("\n")}(t,n);return t[2]?"@media "+t[2]+"{"+e+"}":e}).join("")},s.i=function(t,e){"string"==typeof t&&(t=[[null,t,""]]);for(var n={},r=0;r<this.length;r++){var o=this[r][0];"number"==typeof o&&(n[o]=!0)}for(r=0;r<t.length;r++){var i=t[r];"number"==typeof i[0]&&n[i[0]]||(e&&!i[2]?i[2]=e:e&&(i[2]="("+i[2]+") and ("+e+")"),s.push(i))}},s}},"../node_modules/style-loader/lib/addStyles.js":
/*!*****************************************************!*\
  !*** ../node_modules/style-loader/lib/addStyles.js ***!
  \*****************************************************/
/*! no static exports found */function(t,e,r){var n,o,i,l={},c=(n=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=n.apply(this,arguments)),o}),s=(i={},function(t,e){if("function"==typeof t)return t();if(void 0===i[t]){var n=function(t,e){return e?e.querySelector(t):document.querySelector(t)}.call(this,t,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}i[t]=n}return i[t]}),a=null,d=0,u=[],f=r(/*! ./urls */"../node_modules/style-loader/lib/urls.js");function h(t,e){for(var n=0;n<t.length;n++){var r=t[n],o=l[r.id];if(o){o.refs++;for(var i=0;i<o.parts.length;i++)o.parts[i](r.parts[i]);for(;i<r.parts.length;i++)o.parts.push(g(r.parts[i],e))}else{var s=[];for(i=0;i<r.parts.length;i++)s.push(g(r.parts[i],e));l[r.id]={id:r.id,refs:1,parts:s}}}}function p(t,e){for(var n=[],r={},o=0;o<t.length;o++){var i=t[o],s=e.base?i[0]+e.base:i[0],a={css:i[1],media:i[2],sourceMap:i[3]};r[s]?r[s].parts.push(a):n.push(r[s]={id:s,parts:[a]})}return n}function v(t,e){var n=s(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=u[u.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),u.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=s(t.insertAt.before,n);n.insertBefore(e,o)}}function y(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=u.indexOf(t);0<=e&&u.splice(e,1)}function w(t){var e=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var n=function(){0;return r.nc}();n&&(t.attrs.nonce=n)}return b(e,t.attrs),v(t,e),e}function b(e,n){Object.keys(n).forEach(function(t){e.setAttribute(t,n[t])})}function g(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=i}if(t.singleton){var s=d++;n=a||(a=w(t)),r=x.bind(null,n,s,!1),o=x.bind(null,n,s,!0)}else o=e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",b(e,t.attrs),v(t,e),e}(t),r=function(t,e,n){var r=n.css,o=n.sourceMap,i=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||i)&&(r=f(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var s=new Blob([r],{type:"text/css"}),a=t.href;t.href=URL.createObjectURL(s),a&&URL.revokeObjectURL(a)}.bind(null,n,t),function(){y(n),n.href&&URL.revokeObjectURL(n.href)}):(n=w(t),r=function(t,e){var n=e.css,r=e.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,n),function(){y(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}t.exports=function(t,s){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(s=s||{}).attrs="object"==typeof s.attrs?s.attrs:{},s.singleton||"boolean"==typeof s.singleton||(s.singleton=c()),s.insertInto||(s.insertInto="head"),s.insertAt||(s.insertAt="bottom");var a=p(t,s);return h(a,s),function(t){for(var e=[],n=0;n<a.length;n++){var r=a[n];(o=l[r.id]).refs--,e.push(o)}t&&h(p(t,s),s);for(n=0;n<e.length;n++){var o;if(0===(o=e[n]).refs){for(var i=0;i<o.parts.length;i++)o.parts[i]();delete l[o.id]}}}};var m,A=(m=[],function(t,e){return m[t]=e,m.filter(Boolean).join("\n")});function x(t,e,n,r){var o=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=A(e,o);else{var i=document.createTextNode(o),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(i,s[e]):t.appendChild(i)}}},"../node_modules/style-loader/lib/urls.js":
/*!************************************************!*\
  !*** ../node_modules/style-loader/lib/urls.js ***!
  \************************************************/
/*! no static exports found */function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var o=e.protocol+"//"+e.host,i=o+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var n,r=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(r)?t:(n=0===r.indexOf("//")?r:0===r.indexOf("/")?o+r:i+r.replace(/^\.\//,""),"url("+JSON.stringify(n)+")")})}},"./css/yaw-panel.css":
/*!***************************!*\
  !*** ./css/yaw-panel.css ***!
  \***************************/
/*! no static exports found */function(t,e,n){var r=n(/*! !../../node_modules/css-loader??ref--5-1!./yaw-panel.css */"../node_modules/css-loader/index.js?!./css/yaw-panel.css");"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(/*! ../../node_modules/style-loader/lib/addStyles.js */"../node_modules/style-loader/lib/addStyles.js")(r,o);r.locals&&(t.exports=r.locals)},"./external/yaw-drawer.js":
/*!********************************!*\
  !*** ./external/yaw-drawer.js ***!
  \********************************/
/*! no static exports found */function(t,e){t.exports=new function(){this.canvasArr=[],this.ctxArr=[],this.height=200,this.width=400,this.style={wind:{bgColor:"white",boderColor:"black",r:4},shadowColor:"#808a87"},this.init=function(t,e){this.height=e,this.width=t.width();t.html("<div style='z-index:1; position: absolute; top: 0;'><canvas class='canvas-0'></canvas></div><div style='z-index:2; position: absolute; top: 0;'><canvas class='canvas-1'></canvas></div><div style='z-index:3; position: absolute; top: 0;'><canvas class='canvas-2'></canvas></div>");for(var n=0;n<3;n++){var r=t.find(".canvas-"+n)[0];r.width=this.width,r.height=e,this.canvasArr[n]=r,this.ctxArr[n]=r.getContext("2d")}this.drawShadow(),this.drawDottedline(),this.drawWind()},this.drawWind=function(){var t=this.ctxArr[2];this.bezierEllipse(t),this.drawOval(this.width/4,5*this.height/6,this.width/5,this.height/12,t),this.drawOval(this.width/4*3,5*this.height/6,this.width/5,this.height/12,t)},this.bezierEllipse=function(t){var e=this.width/12,n=this.width/8*3,r=this.height/20*19;t.fillStyle=this.style.wind.bgColor,t.strokeStyle=this.style.wind.boderColor,t.beginPath(),t.moveTo(n-n/5,r+r/2),t.lineTo(n,r),t.bezierCurveTo(n+e,this.height/12*5,n+2*e,this.height/12*5,n+3*e,r),t.lineTo(n+3*e+n/5,r+r/2),t.fill(),t.stroke(),t.beginPath(),t.moveTo(n,r),t.lineTo(n+3*e,r),t.stroke()},this.drawOval=function(t,e,n,r,o){o.beginPath(),o.ellipse(t,e,n,r,0,0,2*Math.PI),o.fillStyle=this.style.wind.bgColor,o.strokeStyle=this.style.wind.boderColor,o.fill(),o.stroke()},this.drawDottedline=function(){for(var t=this.ctxArr[1],e=new Array(45,30,15,0,-15,-30,-45),n=0;n<e.length;n++)this.drawDottedlineDetail(t,e[n])},this.drawDottedlineDetail=function(t,e){t.save(),t.translate(this.width/2,this.height),t.rotate(e*Math.PI/180),t.beginPath(),t.lineWidth=1,t.moveTo(0,-this.height/15*14),t.lineTo(0,-this.height/20),t.setLineDash([8]),t.lineCap="round",t.fillText(e/3+"°",-8,-this.height/15*14-5),45!==e&&t.fillText(Math.abs(e/5)+"%",20,-this.height/4*3),t.stroke(),t.restore()},this.drawShadow=function(){var t=this.ctxArr[0];t.fillStyle=this.style.shadowColor,t.strokeStyle=this.style.shadowColor,t.beginPath(),t.moveTo(this.width/2,this.height),t.arc(this.width/2,this.height,this.height/15*14,1.24*Math.PI,1.76*Math.PI),t.lineTo(this.width/2,this.height),t.fill(),t.stroke()}}},"./module.ts":
/*!*******************!*\
  !*** ./module.ts ***!
  \*******************/
/*! no static exports found */function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PanelCtrl=void 0;var r=n(/*! ./yaw_ctrl */"./yaw_ctrl.ts");e.PanelCtrl=r.YawCtrl},"./yaw_ctrl.ts":
/*!*********************!*\
  !*** ./yaw_ctrl.ts ***!
  \*********************/
/*! no static exports found */function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.YawCtrl=void 0;var r=n(/*! grafana/app/plugins/sdk */"grafana/app/plugins/sdk"),o=s(n(/*! lodash */"lodash"));n(/*! ./css/yaw-panel.css */"./css/yaw-panel.css");var i=s(n(/*! ./external/yaw-drawer */"./external/yaw-drawer.js"));function s(t){return t&&t.__esModule?t:{default:t}}var a,l,c=(a=function(t,e){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}a(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),d=(l=r.MetricsPanelCtrl,c(u,l),u.$inject=["$scope","$injector"],u.prototype.onInitEditMode=function(){this.addEditorTab("Options","public/plugins/oge-wind-yaw/partials/options.html",2)},u.prototype.onPanelTeardown=function(){},u.prototype.onDataReceived=function(t){this.render()},u.prototype.updateClock=function(){},u.prototype.link=function(t,n,e,r){var o=this;this.events.on("render",function(){var t=n.find(".panel-container");o.panel.bgColor?t.css("background-color",o.panel.bgColor):t.css("background-color","");var e=n.find(".canvas-panel");i.default.init(e,r.height)})},u.templateUrl="partials/module.html",u);function u(t,e){var n=l.call(this,t,e)||this;return n.panelDefaults={bgColor:null},o.default.defaultsDeep(n.panel,n.panelDefaults),n.events.on("init-edit-mode",n.onInitEditMode.bind(n)),n.events.on("panel-teardown",n.onPanelTeardown.bind(n)),n.events.on("data-received",n.onDataReceived.bind(n)),n}e.YawCtrl=d},"grafana/app/plugins/sdk":
/*!**********************************!*\
  !*** external "app/plugins/sdk" ***!
  \**********************************/
/*! no static exports found */function(t,e){t.exports=n},lodash:
/*!*************************!*\
  !*** external "lodash" ***!
  \*************************/
/*! no static exports found */function(t,e){t.exports=r}},o.c=s,o.d=function(t,e,n){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s="./module.ts");function o(t){if(s[t])return s[t].exports;var e=s[t]={i:t,l:!1,exports:{}};return i[t].call(e.exports,e,e.exports,o),e.l=!0,e.exports}var i,s});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,