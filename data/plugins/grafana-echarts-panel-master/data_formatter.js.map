{"version":3,"sources":["../src/data_formatter.js"],"names":["_","decodeGeoHash","py2hz","DataFormatter","ctrl","kbn","data","series","length","highestValue","lowestValue","Number","MAX_VALUE","forEach","serie","lastPoint","last","datapoints","lastValue","isArray","location","find","locations","loc","key","toUpperCase","alias","isString","push","value","valueFormatted","valueRounded","dataValue","locationName","name","locationLatitude","latitude","locationLongitude","longitude","stats","panel","valueName","roundValue","parseInt","decimals","valueRange","dataList","esGeoPoint","esMetric","console","info","datapoint","encodedGeohash","decodedGeohash","esLocationName","tableData","geohash","tableLabel","metric","sum","total","item","ret","chain","groupBy","map","group","reduce","type","columnNames","columns","column","columnIndex","text","rows","row"],"mappings":"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","file":"data_formatter.js","sourcesContent":["import _ from 'lodash';\r\nimport decodeGeoHash from './geohash';\r\n\r\nimport py2hz from './china_city_mapping';\r\n\r\nexport default class DataFormatter {\r\n  constructor(ctrl, kbn) {\r\n    this.ctrl = ctrl;\r\n    this.kbn = kbn;\r\n  }\r\n\r\n  setValues(data) {\r\n    if (this.ctrl.series && this.ctrl.series.length > 0) {\r\n      let highestValue = 0;\r\n      let lowestValue = Number.MAX_VALUE;\r\n\r\n      this.ctrl.series.forEach((serie) => {\r\n        const lastPoint = _.last(serie.datapoints);\r\n        const lastValue = _.isArray(lastPoint) ? lastPoint[0] : null;\r\n        const location = _.find(this.ctrl.locations, (loc) => { return loc.key.toUpperCase() === serie.alias.toUpperCase(); });\r\n\r\n        if (!location) return;\r\n\r\n        if (_.isString(lastValue)) {\r\n          data.push({key: serie.alias, value: 0, valueFormatted: lastValue, valueRounded: 0});\r\n        } else {\r\n          const dataValue = {\r\n            key: serie.alias,\r\n            locationName: location.name,\r\n            locationLatitude: location.latitude,\r\n            locationLongitude: location.longitude,\r\n            value: serie.stats[this.ctrl.panel.valueName],\r\n            valueFormatted: lastValue,\r\n            valueRounded: 0\r\n          };\r\n\r\n          if (dataValue.value > highestValue) highestValue = dataValue.value;\r\n          if (dataValue.value < lowestValue) lowestValue = dataValue.value;\r\n\r\n          dataValue.valueRounded = this.kbn.roundValue(dataValue.value, parseInt(this.ctrl.panel.decimals, 10) || 0);\r\n          data.push(dataValue);\r\n        }\r\n      });\r\n\r\n      data.highestValue = highestValue;\r\n      data.lowestValue = lowestValue;\r\n      data.valueRange = highestValue - lowestValue;\r\n    }\r\n  }\r\n\r\n  setGeohashValues(dataList, data) {\r\n    if (!this.ctrl.panel.esGeoPoint || !this.ctrl.panel.esMetric) return;\r\n\r\n    if (dataList && dataList.length > 0) {\r\n      let highestValue = 0;\r\n      let lowestValue = Number.MAX_VALUE;\r\n      console.info('setGeohashValues...');\r\n      dataList[0].datapoints.forEach((datapoint) => {\r\n        const encodedGeohash = datapoint[this.ctrl.panel.esGeoPoint];\r\n        const decodedGeohash = decodeGeoHash(encodedGeohash);\r\n        \r\n        // const dataValue = {\r\n        //   key: encodedGeohash,\r\n        //   locationName: this.ctrl.panel.esLocationName ? datapoint[this.ctrl.panel.esLocationName] : encodedGeohash,\r\n        //   locationLatitude: decodedGeohash.latitude,\r\n        //   locationLongitude: decodedGeohash.longitude,\r\n        //   value: datapoint[this.ctrl.panel.esMetric],\r\n        //   valueFormatted: datapoint[this.ctrl.panel.esMetric],\r\n        //   valueRounded: 0\r\n        // };\r\n\r\n        const dataValue = {\r\n          name: this.ctrl.panel.esLocationName ? py2hz(datapoint[this.ctrl.panel.esLocationName]) : encodedGeohash,\r\n          value: datapoint[this.ctrl.panel.esMetric] \r\n        };\r\n\r\n        if (dataValue.value > highestValue) highestValue = dataValue.value;\r\n        if (dataValue.value < lowestValue) lowestValue = dataValue.value;\r\n\r\n        dataValue.valueRounded = this.kbn.roundValue(dataValue.value, this.ctrl.panel.decimals || 0);\r\n        data.push(dataValue);\r\n      });\r\n\r\n      data.highestValue = highestValue;\r\n      data.lowestValue = lowestValue;\r\n      data.valueRange = highestValue - lowestValue;\r\n    }\r\n  }\r\n\r\n  static tableHandler(tableData) {\r\n    const datapoints = [];\r\n\r\n    if (tableData.type === 'table') {\r\n      const columnNames = {};\r\n\r\n      tableData.columns.forEach((column, columnIndex) => {\r\n        columnNames[columnIndex] = column.text;\r\n      });\r\n\r\n      tableData.rows.forEach((row) => {\r\n        const datapoint = {};\r\n\r\n        row.forEach((value, columnIndex) => {\r\n          const key = columnNames[columnIndex];\r\n          datapoint[key] = value;\r\n        });\r\n\r\n        datapoints.push(datapoint);\r\n      });\r\n    }\r\n\r\n    return datapoints;\r\n  }\r\n\r\n  setTableValues(tableData, data) {\r\n    if (tableData && tableData.length > 0) {\r\n      let highestValue = 0;\r\n      let lowestValue = Number.MAX_VALUE;\r\n\r\n      tableData[0].forEach((datapoint) => {\r\n        if (!datapoint.geohash) {\r\n          return;\r\n        }\r\n\r\n        const encodedGeohash = datapoint.geohash;\r\n        const decodedGeohash = decodeGeoHash(encodedGeohash);\r\n\r\n        const dataValue = {\r\n          key: encodedGeohash,\r\n          locationName: datapoint[this.ctrl.panel.tableLabel] || 'n/a',\r\n          locationLatitude: decodedGeohash.latitude,\r\n          locationLongitude: decodedGeohash.longitude,\r\n          value: datapoint.metric,\r\n          valueFormatted: datapoint.metric,\r\n          valueRounded: 0\r\n        };\r\n\r\n        if (dataValue.value > highestValue) highestValue = dataValue.value;\r\n        if (dataValue.value < lowestValue) lowestValue = dataValue.value;\r\n\r\n        dataValue.valueRounded = this.kbn.roundValue(dataValue.value, this.ctrl.panel.decimals || 0);\r\n        data.push(dataValue);\r\n      });\r\n\r\n      data.highestValue = highestValue;\r\n      data.lowestValue = lowestValue;\r\n      data.valueRange = highestValue - lowestValue;\r\n    }\r\n  }\r\n\r\n  aggByProvince(data) {\r\n    if (!data || data.length == 0) return [];\r\n\r\n    let sum = (total, item) => total += item.value;\r\n    let ret = _.chain(data)\r\n      .groupBy('name') \r\n      .map((group, name) => ({ name: name, value : _.reduce(group, sum, 0) }))\r\n      .value();\r\n\r\n    return ret; \r\n  }\r\n\r\n}\r\n"]}