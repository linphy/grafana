{"version":3,"sources":["../src/datasource.js"],"names":["GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","tableName","jsonData","q","headers","options","query","buildQueryParameters","targets","filter","t","hide","length","when","data","getAdhocFilters","adhocFilters","name","dsType","queryWave","startTime","range","from","valueOf","endTime","to","queryRT","waveType","doRequest","tag","method","then","axis","res","status","x","y","datapoints","forEach","item","index","push","target","start","end","tags","nameMap","scirptMap","indexOf","substr","script","rtdbType","hisCount","hisInterval","join","mapToResult","indexMap","code","datas","value","replace","eval","time","rData","result","response","message","title","annotation","annotationQuery","datasource","enable","iconColor","rangeRaw","mapToTextValue","_","map","d","i","text","isObject","withCredentials","datasourceRequest","scopedVars","refId","Promise","resolve","reject"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\r\n\r\nexport class GenericDatasource {\r\n\r\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\r\n    this.type = instanceSettings.type;\r\n    this.url = instanceSettings.url;\r\n    this.tableName = instanceSettings.jsonData.tableName;\r\n    this.q = $q;\r\n    this.backendSrv = backendSrv;\r\n    this.templateSrv = templateSrv;\r\n    this.headers = {'Content-Type': 'application/json'};\r\n  }\r\n\r\n  query(options) {\r\n    var query = this.buildQueryParameters(options);\r\n    query.targets = query.targets.filter(t => !t.hide);\r\n\r\n    if (query.targets.length <= 0) {\r\n      return this.q.when({data: []});\r\n    }\r\n\r\n    if (this.templateSrv.getAdhocFilters) {\r\n      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\r\n    } else {\r\n      query.adhocFilters = [];\r\n    }\r\n\r\n    if(query.targets[0].dsType == 1){\r\n      return this.queryWave(query.targets);\r\n    }\r\n\r\n    var startTime = query.range.from.valueOf();\r\n    var endTime = query.range.to.valueOf();\r\n    return this.queryRT(query.targets, startTime, endTime);\r\n  }\r\n\r\n  queryWave(targets){\r\n    var type = targets[0].waveType;\r\n    return this.doRequest({\r\n      url: this.url + '/wave/data/' + type,\r\n      data: targets[0].tag,\r\n      method: 'POST'\r\n    }).then(res => {\r\n      var axis = res.data;\r\n      if (res.status !== 200 || !axis || !axis.x || !axis.y) {\r\n        return { data: [] }; \r\n      }\r\n      var datapoints = [];\r\n      axis.x.forEach((item, index) => {\r\n        datapoints.push([axis.y[index], item]);\r\n      });\r\n      var data = {\r\n        target: targets[0].tag,\r\n        datapoints: datapoints\r\n      };\r\n      return { 'data': [data] };\r\n    });\r\n  }\r\n\r\n  queryRT(targets, start, end){\r\n    var tags = [];\r\n    var nameMap = {};\r\n    var scirptMap = {};\r\n    targets.forEach(target => {\r\n      var index = target.tag.indexOf(\"-\");\r\n      var tag = target.tag;\r\n      if(index != -1){\r\n        if(tag.indexOf(\":\") != -1){\r\n          tag = target.tag.substr(0, index);\r\n        }else{\r\n          tag = this.tableName + \".\" + target.tag.substr(0, index);\r\n        }\r\n        nameMap[tag] = target.tag.substr(index + 1, target.tag.length);\r\n      }\r\n      if(target.script){\r\n        scirptMap[tag] = target.script;\r\n      }\r\n      tags.push(tag);\r\n    });\r\n\r\n    var rtdbType = targets[0].rtdbType;\r\n    var hisCount = targets[0].hisCount;\r\n    var hisInterval = targets[0].hisInterval;\r\n    var url;\r\n    if(rtdbType == 1){\r\n      url = this.url + '/rtdb/history/' + tags.join(\",\") + \"/\" + hisCount + \"/\" + start + \"/\" + end;\r\n    }else if(rtdbType == 2){\r\n      url = this.url + '/rtdb/historyInterval/' +  + \"/\" + hisCount + \"/\" + hisInterval + \"/\" + start;\r\n    }\r\n\r\n    if(rtdbType == 0){\r\n      return this.doRequest({\r\n        url: this.url + '/rtdb/snapshot',\r\n        data: tags.join(\",\"),\r\n        method: 'POST'\r\n      }).then(res => {\r\n        return this.mapToResult(tags, res.data, nameMap, scirptMap);\r\n      });\r\n    }else{\r\n      return this.doRequest({\r\n        url: url,\r\n        method: 'GET'\r\n      }).then(res => {\r\n        return this.mapToResult(tags, res.data, nameMap, scirptMap);\r\n      });\r\n    }\r\n  }\r\n\r\n  mapToResult(tags, data, nameMap, scirptMap){\r\n    var indexMap = {};\r\n    data.forEach(item => {\r\n      var datapoints = [];\r\n      var script = scirptMap[item.code];\r\n      item.datas.forEach(data => {\r\n        var value = data.value;\r\n        if(script){\r\n          script = \"(function getTrueValue(){ \" + script.replace(/\\$value/g, value) + \"})\";\r\n          value = eval(script)();\r\n        }\r\n        datapoints.push([value, data.time]);\r\n      });\r\n      var rData = {target: item.code, datapoints: datapoints};\r\n      if(nameMap[item.code]){\r\n        rData.target = nameMap[item.code];\r\n      }\r\n      indexMap[item.code] = rData;\r\n    });\r\n\r\n    var result = [];\r\n    //返回数据根据传入的tag排序\r\n    tags.forEach(code => {\r\n      if(indexMap[code]){\r\n        result.push(indexMap[code])\r\n      }\r\n    });\r\n    return {data: result};\r\n  }\r\n\r\n  testDatasource() {\r\n    return this.doRequest({\r\n      url: this.url + '/status',\r\n      method: 'GET',\r\n    }).then(response => {\r\n      if (response.status === 200) {\r\n        return { status: \"success\", message: \"数据源连接成功\", title: \"Success\" };\r\n      }\r\n    });\r\n  }\r\n\r\n  annotationQuery(options) {\r\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\r\n    var annotationQuery = {\r\n      range: options.range,\r\n      annotation: {\r\n        name: options.annotation.name,\r\n        datasource: options.annotation.datasource,\r\n        enable: options.annotation.enable,\r\n        iconColor: options.annotation.iconColor,\r\n        query: query\r\n      },\r\n      rangeRaw: options.rangeRaw\r\n    };\r\n\r\n    return this.doRequest({\r\n      url: this.url + '/annotations',\r\n      method: 'POST',\r\n      data: annotationQuery\r\n    }).then(result => {\r\n      return result.data;\r\n    });\r\n  }\r\n\r\n  metricFindQuery(query) {\r\n    var target = this.templateSrv.replace(query, null, 'regex')\r\n\r\n    return this.doRequest({\r\n      url: this.url + '/rtdb/search/' + target,\r\n      method: 'GET',\r\n    }).then(this.mapToTextValue);\r\n  }\r\n\r\n  mapToTextValue(result) {\r\n    return _.map(result.data, (d, i) => {\r\n      if (d && d.text && d.value) {\r\n        return { text: d.text, value: d.value };\r\n      } else if (_.isObject(d)) {\r\n        return { text: d, value: i};\r\n      }\r\n      return { text: d, value: d };\r\n    });\r\n  }\r\n\r\n  doRequest(options) {\r\n    options.withCredentials = this.withCredentials;\r\n    options.headers = this.headers;\r\n\r\n    return this.backendSrv.datasourceRequest(options);\r\n  }\r\n\r\n  buildQueryParameters(options) {\r\n    //remove placeholder targets\r\n    options.targets = _.filter(options.targets, target => {\r\n      return target.target !== 'select metric';\r\n    });\r\n\r\n    var targets = _.map(options.targets, target => {\r\n      return {\r\n        tag: this.templateSrv.replace(target.tag, options.scopedVars, 'regex'),\r\n        refId: target.refId,\r\n        hide: target.hide,\r\n        dsType: target.dsType || 0,\r\n        waveType: target.waveType || 0,\r\n        rtdbType: target.rtdbType || 0,\r\n        hisCount: target.hisCount || 0,\r\n        hisInterval: target.hisInterval || 0,\r\n        script: target.script,\r\n      };\r\n    });\r\n\r\n    options.targets = targets;\r\n\r\n    return options;\r\n  }\r\n\r\n  getTagKeys(options) {\r\n    return new Promise((resolve, reject) => {\r\n      this.doRequest({\r\n        url: this.url + '/tag-keys',\r\n        method: 'POST',\r\n        data: options\r\n      }).then(result => {\r\n        return resolve(result.data);\r\n      });\r\n    });\r\n  }\r\n\r\n  getTagValues(options) {\r\n    return new Promise((resolve, reject) => {\r\n      this.doRequest({\r\n        url: this.url + '/tag-values',\r\n        method: 'POST',\r\n        data: options\r\n      }).then(result => {\r\n        return resolve(result.data);\r\n      });\r\n    });\r\n  }\r\n\r\n}\r\n"]}