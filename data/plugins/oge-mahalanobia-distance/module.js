define(["app/plugins/sdk","lodash"],function(i,n){return a={},r.m=s={"../node_modules/css-loader/index.js?!./css/mahalanobia-panel.css":
/*!************************************************************************!*\
  !*** ../node_modules/css-loader??ref--5-1!./css/mahalanobia-panel.css ***!
  \************************************************************************/
/*! no static exports found */function(t,e,i){(t.exports=i(/*! ../../node_modules/css-loader/lib/css-base.js */"../node_modules/css-loader/lib/css-base.js")(!0)).push([t.i,".oge-mahalanobia-distance {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n}\r\n\r\n.oge-mahalanobia-distance h4 {\r\n  line-height: 1.4;\r\n  text-align: center;\r\n}\r\n\r\n\r\n.canvas-panel{\r\n  width: 100%;\r\n}\r\n\r\n.tip {\r\n  position: absolute; \r\n  width: 100px; \r\n  height: auto; \r\n}","",{version:3,sources:["D:/GIT_SVN_OGE/grafana-plugins/oge-mahalanobia-distance/src/css/mahalanobia-panel.css"],names:[],mappings:"AAAA;EACE,cAAc;EACd,oBAAoB;EACpB,wBAAwB;EACxB,uBAAuB;CACxB;;AAED;EACE,iBAAiB;EACjB,mBAAmB;CACpB;;;AAGD;EACE,YAAY;CACb;;AAED;EACE,mBAAmB;EACnB,aAAa;EACb,aAAa;CACd",file:"mahalanobia-panel.css",sourcesContent:[".oge-mahalanobia-distance {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n}\r\n\r\n.oge-mahalanobia-distance h4 {\r\n  line-height: 1.4;\r\n  text-align: center;\r\n}\r\n\r\n\r\n.canvas-panel{\r\n  width: 100%;\r\n}\r\n\r\n.tip {\r\n  position: absolute; \r\n  width: 100px; \r\n  height: auto; \r\n}"],sourceRoot:""}])},"../node_modules/css-loader/lib/css-base.js":
/*!**************************************************!*\
  !*** ../node_modules/css-loader/lib/css-base.js ***!
  \**************************************************/
/*! no static exports found */function(t,e){t.exports=function(i){var a=[];return a.toString=function(){return this.map(function(t){var e=function(t,e){var i=t[1]||"",n=t[3];if(!n)return i;if(e&&"function"==typeof btoa){var r=function(t){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(t))))+" */"}(n),s=n.sources.map(function(t){return"/*# sourceURL="+n.sourceRoot+t+" */"});return[i].concat(s).concat([r]).join("\n")}return[i].join("\n")}(t,i);return t[2]?"@media "+t[2]+"{"+e+"}":e}).join("")},a.i=function(t,e){"string"==typeof t&&(t=[[null,t,""]]);for(var i={},n=0;n<this.length;n++){var r=this[n][0];"number"==typeof r&&(i[r]=!0)}for(n=0;n<t.length;n++){var s=t[n];"number"==typeof s[0]&&i[s[0]]||(e&&!s[2]?s[2]=e:e&&(s[2]="("+s[2]+") and ("+e+")"),a.push(s))}},a}},"../node_modules/style-loader/lib/addStyles.js":
/*!*****************************************************!*\
  !*** ../node_modules/style-loader/lib/addStyles.js ***!
  \*****************************************************/
/*! no static exports found */function(t,e,n){var i,r,s,l={},c=(i=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===r&&(r=i.apply(this,arguments)),r}),a=(s={},function(t,e){if("function"==typeof t)return t();if(void 0===s[t]){var i=function(t,e){return e?e.querySelector(t):document.querySelector(t)}.call(this,t,e);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}s[t]=i}return s[t]}),o=null,h=0,u=[],d=n(/*! ./urls */"../node_modules/style-loader/lib/urls.js");function f(t,e){for(var i=0;i<t.length;i++){var n=t[i],r=l[n.id];if(r){r.refs++;for(var s=0;s<r.parts.length;s++)r.parts[s](n.parts[s]);for(;s<n.parts.length;s++)r.parts.push(x(n.parts[s],e))}else{var a=[];for(s=0;s<n.parts.length;s++)a.push(x(n.parts[s],e));l[n.id]={id:n.id,refs:1,parts:a}}}}function p(t,e){for(var i=[],n={},r=0;r<t.length;r++){var s=t[r],a=e.base?s[0]+e.base:s[0],o={css:s[1],media:s[2],sourceMap:s[3]};n[a]?n[a].parts.push(o):i.push(n[a]={id:a,parts:[o]})}return i}function y(t,e){var i=a(t.insertInto);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var n=u[u.length-1];if("top"===t.insertAt)n?n.nextSibling?i.insertBefore(e,n.nextSibling):i.appendChild(e):i.insertBefore(e,i.firstChild),u.push(e);else if("bottom"===t.insertAt)i.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var r=a(t.insertAt.before,i);i.insertBefore(e,r)}}function m(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=u.indexOf(t);0<=e&&u.splice(e,1)}function v(t){var e=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var i=function(){0;return n.nc}();i&&(t.attrs.nonce=i)}return g(e,t.attrs),y(t,e),e}function g(e,i){Object.keys(i).forEach(function(t){e.setAttribute(t,i[t])})}function x(e,t){var i,n,r,s;if(t.transform&&e.css){if(!(s="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=s}if(t.singleton){var a=h++;i=o||(o=v(t)),n=A.bind(null,i,a,!1),r=A.bind(null,i,a,!0)}else r=e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(i=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",g(e,t.attrs),y(t,e),e}(t),n=function(t,e,i){var n=i.css,r=i.sourceMap,s=void 0===e.convertToAbsoluteUrls&&r;(e.convertToAbsoluteUrls||s)&&(n=d(n));r&&(n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var a=new Blob([n],{type:"text/css"}),o=t.href;t.href=URL.createObjectURL(a),o&&URL.revokeObjectURL(o)}.bind(null,i,t),function(){m(i),i.href&&URL.revokeObjectURL(i.href)}):(i=v(t),n=function(t,e){var i=e.css,n=e.media;n&&t.setAttribute("media",n);if(t.styleSheet)t.styleSheet.cssText=i;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(i))}}.bind(null,i),function(){m(i)});return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else r()}}t.exports=function(t,a){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(a=a||{}).attrs="object"==typeof a.attrs?a.attrs:{},a.singleton||"boolean"==typeof a.singleton||(a.singleton=c()),a.insertInto||(a.insertInto="head"),a.insertAt||(a.insertAt="bottom");var o=p(t,a);return f(o,a),function(t){for(var e=[],i=0;i<o.length;i++){var n=o[i];(r=l[n.id]).refs--,e.push(r)}t&&f(p(t,a),a);for(i=0;i<e.length;i++){var r;if(0===(r=e[i]).refs){for(var s=0;s<r.parts.length;s++)r.parts[s]();delete l[r.id]}}}};var b,w=(b=[],function(t,e){return b[t]=e,b.filter(Boolean).join("\n")});function A(t,e,i,n){var r=i?"":n.css;if(t.styleSheet)t.styleSheet.cssText=w(e,r);else{var s=document.createTextNode(r),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(s,a[e]):t.appendChild(s)}}},"../node_modules/style-loader/lib/urls.js":
/*!************************************************!*\
  !*** ../node_modules/style-loader/lib/urls.js ***!
  \************************************************/
/*! no static exports found */function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var r=e.protocol+"//"+e.host,s=r+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var i,n=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(n)?t:(i=0===n.indexOf("//")?n:0===n.indexOf("/")?r+n:s+n.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}},"./css/mahalanobia-panel.css":
/*!***********************************!*\
  !*** ./css/mahalanobia-panel.css ***!
  \***********************************/
/*! no static exports found */function(t,e,i){var n=i(/*! !../../node_modules/css-loader??ref--5-1!./mahalanobia-panel.css */"../node_modules/css-loader/index.js?!./css/mahalanobia-panel.css");"string"==typeof n&&(n=[[t.i,n,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};i(/*! ../../node_modules/style-loader/lib/addStyles.js */"../node_modules/style-loader/lib/addStyles.js")(n,r);n.locals&&(t.exports=n.locals)},"./external/mahalanobia-drawer.js":
/*!****************************************!*\
  !*** ./external/mahalanobia-drawer.js ***!
  \****************************************/
/*! no static exports found */function(t,e){t.exports=new function(){this.canvasArr=[],this.ctxArr=[],this.height=200,this.width=400,this.defalutStyle={horizontal_tick_spacing:50,vertical_tick_spacing:25,margin:{left:30,bottom:30,top:5,right:5},axis:{textColor:"white",lineColor:"#8d8f8d",lineWidth:1,lineheight:6,x:{max:10,min:-10},y:{max:10,min:-10}},scatter:{color:"rgb(126, 178, 109)",r:4},circle:{color:"rgb(126, 178, 109)"},rotateAngel:-45},this.xConverRatio=1,this.yConverRatio=1,this.getNewStyle=function(t){var e=_.cloneDeep(this.defalutStyle);return e.axis.textColor=t.axis.textColor?t.axis.textColor:e.axis.textColor,e.axis.lineColor=t.axis.lineColor?t.axis.lineColor:e.axis.lineColor,e.scatter.color=t.scatter.color?t.scatter.color:e.scatter.color,e.scatter.r=t.scatter.r?t.scatter.r:scatter.r,e.circle.color=t.circle.color?t.circle.color:e.circle.color,t.axis.x&&(e.axis.x.min=t.axis.x.min?t.axis.x.min:e.axis.x.min,e.axis.x.max=t.axis.x.max?t.axis.x.max:e.axis.x.max),t.axis.y&&(e.axis.y.min=t.axis.y.min?t.axis.y.min:e.axis.y.min,e.axis.y.max=t.axis.y.max?t.axis.y.max:e.axis.y.max),e},this.init=function(t,e,i){this.height=e,this.width=t.width(),this.style=this.getNewStyle(i);t.html("<div style='z-index:0; position: absolute; top: 0;'><canvas class='canvas-0'></canvas></div><div style='z-index:2; position: absolute; top: 0;'><canvas class='canvas-1'></canvas></div><div style='z-index:1; position: absolute; top: 0;'><canvas class='canvas-2'></canvas></div>");for(var n=0;n<3;n++){var r=t.find(".canvas-"+n)[0];r.width=this.width,r.height=this.height,this.canvasArr[n]=r,this.ctxArr[n]=r.getContext("2d")}this.target=t},this.draw=function(t,e){this.xConverRatio=(this.width-this.style.margin.left-this.style.margin.right)/(this.style.axis.x.max-this.style.axis.x.min),this.yConverRatio=(this.height-this.style.margin.top-this.style.margin.bottom)/(this.style.axis.y.max-this.style.axis.y.min),this.drawAxis(),this.drawScatter(e),this.drawOval(t)},this.drawAxis=function(){var t=this.ctxArr[0];t.strokeStyle=this.style.axis.lineColor,t.lineWidth=this.style.axis.axis_linewidth,this.drawHorizontalAxis(t),this.drawVerticalAxis(t),t.strokeStyle=this.style.tick_color,t.fillStyle=this.style.axis.textColor,this.drawHorizontalAxisTicks(t),this.drawVerticalAxisTicks(t)},this.drawHorizontalAxis=function(t){t.beginPath(),t.moveTo(this.style.margin.left,this.height-this.style.margin.bottom),t.lineTo(this.width-this.style.margin.right,this.height-this.style.margin.bottom),t.stroke()},this.drawVerticalAxis=function(t){t.beginPath(),t.moveTo(this.style.margin.left,this.height-this.style.margin.bottom),t.lineTo(this.style.margin.left,this.style.margin.top),t.stroke()},this.drawHorizontalAxisTicks=function(t){var e=(this.width-this.style.margin.left-this.style.margin.right)/this.style.horizontal_tick_spacing,i=0;if(this.style.axis.x.min<0){for(var n=0,r=this.style.axis.x.max,s=0;s<e;s++){var a=(c=s*this.style.horizontal_tick_spacing)/this.xConverRatio+this.style.axis.x.min,o=Math.abs(a);o<r&&(r=o,n=this.style.horizontal_tick_spacing-a*this.xConverRatio)}i=n}var l=1;i>this.style.horizontal_tick_spacing?(l=-1,e--):0<i&&(l=0);for(s=l;s<e;s++){t.beginPath();var c=i+s*this.style.horizontal_tick_spacing;t.moveTo(this.style.margin.left+c,this.height-this.style.margin.bottom),t.lineTo(this.style.margin.left+c,this.height-this.style.margin.bottom+this.style.axis.lineheight);var h=(c/this.xConverRatio+this.style.axis.x.min).toFixed(1);t.fillText(h,this.style.margin.left+c-8,this.height-this.style.margin.left+this.style.axis.lineheight+12),t.stroke()}},this.drawVerticalAxisTicks=function(t){var e=this.height-this.style.margin.top-this.style.margin.bottom,i=e/this.style.vertical_tick_spacing,n=0;if(this.style.axis.y.min<0){for(var r=0,s=this.style.axis.y.max,a=0;a<i;a++){var o=(h=a*this.style.vertical_tick_spacing)/this.yConverRatio+this.style.axis.y.min,l=Math.abs(o);l<s&&(s=l,r=this.style.vertical_tick_spacing-o*this.yConverRatio)}n=r}var c=1;n>this.style.vertical_tick_spacing&&(c=0,i++);for(a=c;a<i;a++){t.beginPath();var h=n+a*this.style.vertical_tick_spacing+this.style.margin.top,u=this.height-h;t.moveTo(this.style.margin.bottom,u),t.lineTo(this.style.margin.bottom-this.style.axis.lineheight,u);var d=((e-u+this.style.margin.top)/this.yConverRatio+this.style.axis.y.min).toFixed(1);t.fillText(d,this.style.margin.bottom-this.style.axis.lineheight-20,4+u),t.stroke()}},this.drawScatter=function(t){context=this.ctxArr[1],context.strokeStyle=this.style.scatter.color,context.fillStyle=this.style.scatter.color;for(var e=(this.width-this.style.margin.left-this.style.margin.right)/2+this.style.margin.left,i=(this.height-this.style.margin.top-this.style.margin.bottom)/2+this.style.margin.top,n=[],r=0;r<t.length;r++){var s=e+t[r][0]*this.xConverRatio,a=i-t[r][1]*this.yConverRatio;context.beginPath(),context.arc(s,a,this.style.scatter.r,0,2*Math.PI),context.fill(),context.stroke(),n.push([s,a,t[r][0],t[r][1]])}this.canvasArr[1].addEventListener("mousemove",this.doMouseMove,!1),this.canvasArr[1].pointData=n,this.canvasArr[1].canvasStyle=this.style,this.canvasArr[1].showDetail=this.showPointDetail,this.canvasArr[1].target=this.target},this.drawOval=function(t){var e=this.ctxArr[2];e.strokeStyle=this.style.circle.color;for(var i=(this.width-this.style.margin.left-this.style.margin.right)/2+this.style.margin.left,n=(this.height-this.style.margin.top-this.style.margin.bottom)/2+this.style.margin.top,r=0;r<t.length;r++){var s=t[r][2]*this.xConverRatio/2,a=t[r][3]*this.yConverRatio/2,o=i+t[r][0]*this.xConverRatio,l=n-t[r][1]*this.yConverRatio;e.beginPath(),e.setLineDash([5,8]),e.moveTo(o-s,n),e.bezierCurveTo(o-s,l+a,o+s,l+a,o+s,l),e.bezierCurveTo(o+s,l-a,o-s,l-a,o-s,l),e.stroke()}var c=t[0][4]*(n-t[0][1]*this.yConverRatio)/(i+t[0][0]*this.xConverRatio);this.canvasArr[2].style.cssText="-webkit-transform: rotate(-"+c+"deg)"},this.doMouseMove=function(){for(var t=this.pointData,e=this.getBoundingClientRect(),i=(event.pageX-e.left)*(this.width/e.width),n=(event.pageY-e.top)*(this.height/e.height),r=!1,s=this.canvasStyle,a=0;a<t.length;a++){var o=t[a][0]+s.scatter.r,l=t[a][0]-s.scatter.r,c=t[a][1]+s.scatter.r,h=t[a][1]-s.scatter.r;if(i<=o&&l<=i&&n<=c&&h<=n){this.showDetail(t[a][2],t[a][3],event.pageX-e.left,event.pageY-e.top),r=!0;break}}r||this.target.parent().find(".tip").remove()},this.showPointDetail=function(t,e,i,n){this.target.parent().find(".tip").remove();var r=$("<div class='tip' style='z-index:3'> x: "+t.toFixed(2)+" y: "+e.toFixed(2)+"</div>");r.css({top:n+"px",left:i+"px"}),r.appendTo(this.target.parent())}}},"./mahalanobia_ctrl.ts":
/*!*****************************!*\
  !*** ./mahalanobia_ctrl.ts ***!
  \*****************************/
/*! no static exports found */function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MahalanobiaCtrl=void 0;var n=i(/*! grafana/app/plugins/sdk */"grafana/app/plugins/sdk"),r=s(i(/*! lodash */"lodash"));i(/*! ./css/mahalanobia-panel.css */"./css/mahalanobia-panel.css");var a=s(i(/*! ./external/mahalanobia-drawer */"./external/mahalanobia-drawer.js"));function s(t){return t&&t.__esModule?t:{default:t}}var o,l,c=(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),h=(l=n.MetricsPanelCtrl,c(u,l),u.$inject=["$scope","$injector"],u.prototype.onInitEditMode=function(){this.addEditorTab("Options","public/plugins/oge-mahalanobia-distance/partials/options.html",2)},u.prototype.onPanelTeardown=function(){},u.prototype.onDataReceived=function(t){t&&2==t.length&&t[0].rows&&t[1].rows&&2==t[0].columns.length&&5==t[1].columns.length?(this.scatterDataList=t[0].rows,this.ovalDataList=t[1].rows,this.dataIsOK=!0):this.dataIsOK=!1,this.render()},u.prototype.onDataError=function(){this.dataIsOK=!1},u.prototype.link=function(t,n,e,r){var s=this;this.events.on("render",function(){var t=n.find(".panel-content");s.panel.bgColor?t.css("background-color",s.panel.bgColor):t.css("background-color","");var e=n.find(".canvas-panel"),i=n.find(".datapoints-warning");if(!s.dataIsOK)return i.show(),void e.html("").hide();e.show(),i.hide(),0!=e.length&&(a.default.init(e,r.height,s.panel),a.default.draw(s.ovalDataList,s.scatterDataList))})},u.templateUrl="partials/module.html",u);function u(t,e){var i=l.call(this,t,e)||this;return i.panelDefaults={bgColor:null,axis:{textColor:null,lineColor:null,x:{max:10,min:-10},y:{max:10,min:-10}},scatter:{color:null,r:3},circle:{color:null}},r.default.defaultsDeep(i.panel,i.panelDefaults),i.events.on("init-edit-mode",i.onInitEditMode.bind(i)),i.events.on("panel-teardown",i.onPanelTeardown.bind(i)),i.events.on("data-received",i.onDataReceived.bind(i)),i.events.on("data-error",i.onDataError.bind(i)),i}e.MahalanobiaCtrl=h},"./module.ts":
/*!*******************!*\
  !*** ./module.ts ***!
  \*******************/
/*! no static exports found */function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PanelCtrl=void 0;var n=i(/*! ./mahalanobia_ctrl */"./mahalanobia_ctrl.ts");e.PanelCtrl=n.MahalanobiaCtrl},"grafana/app/plugins/sdk":
/*!**********************************!*\
  !*** external "app/plugins/sdk" ***!
  \**********************************/
/*! no static exports found */function(t,e){t.exports=i},lodash:
/*!*************************!*\
  !*** external "lodash" ***!
  \*************************/
/*! no static exports found */function(t,e){t.exports=n}},r.c=a,r.d=function(t,e,i){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s="./module.ts");function r(t){if(a[t])return a[t].exports;var e=a[t]={i:t,l:!1,exports:{}};return s[t].call(e.exports,e,e.exports,r),e.l=!0,e.exports}var s,a});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vY3NzL21haGFsYW5vYmlhLXBhbmVsLmNzcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL3VybHMuanMiLCJ3ZWJwYWNrOi8vLy4vY3NzL21haGFsYW5vYmlhLXBhbmVsLmNzcz9jMjBkIiwid2VicGFjazovLy8uL2V4dGVybmFsL21haGFsYW5vYmlhLWRyYXdlci5qcyIsIndlYnBhY2s6Ly8vLi9tYWhhbGFub2JpYV9jdHJsLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibSIsIm1vZHVsZSIsImV4cG9ydHMiLCJwdXNoIiwiaSIsInZlcnNpb24iLCJzb3VyY2VzIiwibmFtZXMiLCJtYXBwaW5ncyIsImZpbGUiLCJzb3VyY2VzQ29udGVudCIsInNvdXJjZVJvb3QiLCJ1c2VTb3VyY2VNYXAiLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJjc3NNYXBwaW5nIiwiYnRvYSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VNYXAiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0b0NvbW1lbnQiLCJzb3VyY2VVUkxzIiwic291cmNlIiwiY29uY2F0Iiwiam9pbiIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJtb2R1bGVzIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJsZW5ndGgiLCJpZCIsImZuIiwibWVtbyIsInN0eWxlc0luRG9tIiwiaXNPbGRJRSIsIndpbmRvdyIsImRvY3VtZW50IiwiYWxsIiwiYXRvYiIsImFwcGx5IiwiYXJndW1lbnRzIiwiZ2V0RWxlbWVudCIsInRhcmdldCIsInBhcmVudCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsImNhbGwiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInN0eWxlc0luc2VydGVkQXRUb3AiLCJmaXhVcmxzIiwiYWRkU3R5bGVzVG9Eb20iLCJzdHlsZXMiLCJvcHRpb25zIiwiZG9tU3R5bGUiLCJyZWZzIiwiaiIsInBhcnRzIiwiYWRkU3R5bGUiLCJsaXN0VG9TdHlsZXMiLCJuZXdTdHlsZXMiLCJiYXNlIiwicGFydCIsImNzcyIsIm1lZGlhIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGUiLCJpbnNlcnRJbnRvIiwiRXJyb3IiLCJsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCIsImluc2VydEF0IiwibmV4dFNpYmxpbmciLCJpbnNlcnRCZWZvcmUiLCJhcHBlbmRDaGlsZCIsImZpcnN0Q2hpbGQiLCJiZWZvcmUiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJpZHgiLCJpbmRleE9mIiwic3BsaWNlIiwiY3JlYXRlU3R5bGVFbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInVuZGVmaW5lZCIsImF0dHJzIiwidHlwZSIsIm5vbmNlIiwibmMiLCJnZXROb25jZSIsImFkZEF0dHJzIiwiZWwiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsInNldEF0dHJpYnV0ZSIsIm9iaiIsInVwZGF0ZSIsInJlbW92ZSIsInJlc3VsdCIsInRyYW5zZm9ybSIsImRlZmF1bHQiLCJzdHlsZUluZGV4IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsImJpbmQiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJCbG9iIiwibGluayIsInJlbCIsImNyZWF0ZUxpbmtFbGVtZW50IiwiYXV0b0ZpeFVybHMiLCJjb252ZXJ0VG9BYnNvbHV0ZVVybHMiLCJibG9iIiwib2xkU3JjIiwiaHJlZiIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3JlYXRlVGV4dE5vZGUiLCJuZXdPYmoiLCJERUJVRyIsIm5ld0xpc3QiLCJtYXlSZW1vdmUiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsImluZGV4IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJCb29sZWFuIiwiY3NzTm9kZSIsImNoaWxkTm9kZXMiLCJsb2NhdGlvbiIsImJhc2VVcmwiLCJwcm90b2NvbCIsImhvc3QiLCJjdXJyZW50RGlyIiwicGF0aG5hbWUiLCJyZXBsYWNlIiwiZnVsbE1hdGNoIiwib3JpZ1VybCIsIm5ld1VybCIsInVucXVvdGVkT3JpZ1VybCIsInRyaW0iLCJvIiwiJDEiLCJ0ZXN0IiwiaG1yIiwibG9jYWxzIiwiY2FudmFzQXJyIiwiY3R4QXJyIiwiaGVpZ2h0Iiwid2lkdGgiLCJkZWZhbHV0U3R5bGUiLCJob3Jpem9udGFsX3RpY2tfc3BhY2luZyIsInZlcnRpY2FsX3RpY2tfc3BhY2luZyIsIm1hcmdpbiIsImxlZnQiLCJib3R0b20iLCJ0b3AiLCJyaWdodCIsImF4aXMiLCJ0ZXh0Q29sb3IiLCJsaW5lQ29sb3IiLCJsaW5lV2lkdGgiLCJsaW5laGVpZ2h0IiwieCIsIm1heCIsIm1pbiIsInkiLCJzY2F0dGVyIiwiY29sb3IiLCJyIiwiY2lyY2xlIiwicm90YXRlQW5nZWwiLCJ4Q29udmVyUmF0aW8iLCJ5Q29udmVyUmF0aW8iLCJnZXROZXdTdHlsZSIsImNvbmZpZyIsIl8iLCJjbG9uZURlZXAiLCJpbml0IiwiaHRtbCIsImNhbnZhcyIsImZpbmQiLCJnZXRDb250ZXh0IiwiZHJhdyIsIm92YWxEYXRhTGlzdCIsInNjYXR0ZXJEYXRhTGlzdCIsImRyYXdBeGlzIiwiZHJhd1NjYXR0ZXIiLCJkcmF3T3ZhbCIsImNvbnRleHQiLCJzdHJva2VTdHlsZSIsImF4aXNfbGluZXdpZHRoIiwiZHJhd0hvcml6b250YWxBeGlzIiwiZHJhd1ZlcnRpY2FsQXhpcyIsInRpY2tfY29sb3IiLCJmaWxsU3R5bGUiLCJkcmF3SG9yaXpvbnRhbEF4aXNUaWNrcyIsImRyYXdWZXJ0aWNhbEF4aXNUaWNrcyIsImJlZ2luUGF0aCIsIm1vdmVUbyIsImxpbmVUbyIsInN0cm9rZSIsIm51bSIsInN0YXJ0WCIsImFjdHVhbERpc3RhbmNlIiwibGFzdERpc3RhbmNlIiwidmFsdWUiLCJhYnNEaXN0YW5jZSIsIk1hdGgiLCJhYnMiLCJzdGFydEluZGV4IiwidGV4dCIsInRvRml4ZWQiLCJmaWxsVGV4dCIsImV4aXN0SGVpZ2h0Iiwic3RhcnRZIiwiYWN0dWFsWSIsInBpeGVsQXJyIiwidGVtcFgiLCJ0ZW1weSIsImFyYyIsIlBJIiwiZmlsbCIsImFkZEV2ZW50TGlzdGVuZXIiLCJkb01vdXNlTW92ZSIsInBvaW50RGF0YSIsImNhbnZhc1N0eWxlIiwic2hvd0RldGFpbCIsInNob3dQb2ludERldGFpbCIsIm92YWxMaXN0IiwiaG9yaXpvbnRhbFIiLCJ2ZXJ0aWNhbFIiLCJ4TW92ZSIsInlNb3ZlIiwic2V0TGluZURhc2giLCJiZXppZXJDdXJ2ZVRvIiwiYW5nbGUiLCJiYm94IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiZXZlbnQiLCJwYWdlWCIsInBhZ2VZIiwiY2hlY2tQb2ludCIsInhtYXgiLCJ4bWluIiwieW1heCIsInltaW4iLCJ0aXAiLCIkIiwiYXBwZW5kVG8iLCJfc2RrIiwiX3N1cGVyIiwiTWFoYWxhbm9iaWFDdHJsIiwiX19leHRlbmRzIiwiJGluamVjdCIsInByb3RvdHlwZSIsIm9uSW5pdEVkaXRNb2RlIiwiYWRkRWRpdG9yVGFiIiwib25EYXRhUmVjZWl2ZWQiLCJkYXRhTGlzdCIsInJvd3MiLCJjb2x1bW5zIiwiZGF0YUlzT0siLCJyZW5kZXIiLCJvbkRhdGFFcnJvciIsIl9zY29wZSIsImVsZW0iLCJfYXR0cnMiLCJjdHJsIiwiZXZlbnRzIiwib24iLCJfdGhpcyIsInBhbmVsIiwiYmdDb2xvciIsIiRwYW5lbENvbnRlbnQiLCJjYW52YXNQYW5lbCIsIndhcm5pbmdQYW5lbCIsInNob3ciLCJoaWRlIiwiX21haGFsYW5vYmlhRHJhd2VyMiIsInRlbXBsYXRlVXJsIiwiJHNjb3BlIiwiJGluamVjdG9yIiwicGFuZWxEZWZhdWx0cyIsImMiLCJkIiwibmFtZSIsImdldHRlciIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwibW9kdWxlSWQiLCJsIl0sIm1hcHBpbmdzIjoieURBQ0FBLEVBQUEsR0E0QkFDLEVBQUFDOzs7OytDQzdCQUMsRUFBQUMsUUFBMkJILHNEQUFRLDZDQUFSQSxFQUF1RCxJQUtsRkksS0FBQSxDQUFjRixFQUFBRyxFQUFTLDZXQUE2VyxJQUFRQyxRQUFBLEVBQUFDLFFBQUEsMEZBQUFDLE1BQUEsR0FBQUMsU0FBQSxvS0FBb1NDLEtBQUEsd0JBQUFDLGVBQUEsK1dBQWthQyxXQUFBOzs7OzRDQ0FsbENWLEVBQUFDLFFBQUEsU0FBQVUsR0FDQSxJQUFBQyxFQUFBLEdBd0NBLE9BckNBQSxFQUFBQyxTQUFBLFdBQ0EsT0FBQUMsS0FBQUMsSUFBQSxTQUFBQyxHQUNBLElBQUFDLEVBc0NBLFNBQUFELEVBQUFMLEdBQ0EsSUFBQU0sRUFBQUQsRUFBQSxPQUNBRSxFQUFBRixFQUFBLEdBQ0EsSUFBQUUsRUFDQSxPQUFBRCxFQUdBLEdBQUFOLEdBQUEsbUJBQUFRLEtBQUEsQ0FDQSxJQUFBQyxFQVlBLFNBQUFDLEdBS0EseUVBSEFGLEtBQUFHLFNBQUFDLG1CQUFBQyxLQUFBQyxVQUFBSixNQUdBLE1BakJBSyxDQUFBUixHQUNBUyxFQUFBVCxFQUFBYixRQUFBVSxJQUFBLFNBQUFhLEdBQ0EsdUJBQUFWLEVBQUFSLFdBQUFrQixFQUFBLFFBR0EsT0FBQVgsR0FBQVksT0FB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T0FBQXpGLEVBQ0EsSUFBQTBGLEVBQUFoTixPQUFBaU4sT0FBQSxNQUdBLEdBRkF6VCxFQUFBeUwsRUFBQStILEdBQ0FoTixPQUFBd00sZUFBQVEsRUFBQSxXQUF5Q1AsWUFBQSxFQUFBbkYsVUFDekMsRUFBQXdGLEdBQUEsaUJBQUF4RixFQUFBLFFBQUFuSCxLQUFBbUgsRUFBQTlOLEVBQUE2UyxFQUFBVyxFQUFBN00sRUFBQSxTQUFBQSxHQUFnSCxPQUFBbUgsRUFBQW5ILElBQXFCVSxLQUFBLEtBQUFWLElBQ3JJLE9BQUE2TSxHQUlBeFQsRUFBQTBULEVBQUEsU0FBQXhULEdBQ0EsSUFBQTZTLEVBQUE3UyxLQUFBcVQsV0FDQSxXQUEyQixPQUFBclQsRUFBQSxTQUMzQixXQUFpQyxPQUFBQSxHQUVqQyxPQURBRixFQUFBNlMsRUFBQUUsRUFBQSxJQUFBQSxHQUNBQSxHQUlBL1MsRUFBQTZKLEVBQUEsU0FBQThKLEVBQUFDLEdBQXNELE9BQUFwTixPQUFBdUssVUFBQThDLGVBQUF2USxLQUFBcVEsRUFBQUMsSUFHdEQ1VCxFQUFBOFQsRUFBQSxHQUlBOVQsSUFBQStULEVBQUEsZUE5RUEsU0FBQS9ULEVBQUFnVSxHQUdBLEdBQUFqVSxFQUFBaVUsR0FDQSxPQUFBalUsRUFBQWlVLEdBQUE3VCxRQUdBLElBQUFELEVBQUFILEVBQUFpVSxHQUFBLENBQ0EzVCxFQUFBMlQsRUFDQUMsR0FBQSxFQUNBOVQsUUFBQSxJQVVBLE9BTkErQixFQUFBOFIsR0FBQTFRLEtBQUFwRCxFQUFBQyxRQUFBRCxJQUFBQyxRQUFBSCxHQUdBRSxFQUFBK1QsR0FBQSxFQUdBL1QsRUFBQUMsY0F2QkFKIiwiZmlsZSI6Im1vZHVsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBcIi4vbW9kdWxlLnRzXCIpO1xuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSh0cnVlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5vZ2UtbWFoYWxhbm9iaWEtZGlzdGFuY2Uge1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxufVxcclxcblxcclxcbi5vZ2UtbWFoYWxhbm9iaWEtZGlzdGFuY2UgaDQge1xcclxcbiAgbGluZS1oZWlnaHQ6IDEuNDtcXHJcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuXFxyXFxuLmNhbnZhcy1wYW5lbHtcXHJcXG4gIHdpZHRoOiAxMDAlO1xcclxcbn1cXHJcXG5cXHJcXG4udGlwIHtcXHJcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTsgXFxyXFxuICB3aWR0aDogMTAwcHg7IFxcclxcbiAgaGVpZ2h0OiBhdXRvOyBcXHJcXG59XCIsIFwiXCIsIHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIkQ6L0dJVF9TVk5fT0dFL2dyYWZhbmEtcGx1Z2lucy9vZ2UtbWFoYWxhbm9iaWEtZGlzdGFuY2Uvc3JjL2Nzcy9tYWhhbGFub2JpYS1wYW5lbC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxjQUFjO0VBQ2Qsb0JBQW9CO0VBQ3BCLHdCQUF3QjtFQUN4Qix1QkFBdUI7Q0FDeEI7O0FBRUQ7RUFDRSxpQkFBaUI7RUFDakIsbUJBQW1CO0NBQ3BCOzs7QUFHRDtFQUNFLFlBQVk7Q0FDYjs7QUFFRDtFQUNFLG1CQUFtQjtFQUNuQixhQUFhO0VBQ2IsYUFBYTtDQUNkXCIsXCJmaWxlXCI6XCJtYWhhbGFub2JpYS1wYW5lbC5jc3NcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLm9nZS1tYWhhbGFub2JpYS1kaXN0YW5jZSB7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG59XFxyXFxuXFxyXFxuLm9nZS1tYWhhbGFub2JpYS1kaXN0YW5jZSBoNCB7XFxyXFxuICBsaW5lLWhlaWdodDogMS40O1xcclxcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbn1cXHJcXG5cXHJcXG5cXHJcXG4uY2FudmFzLXBhbmVse1xcclxcbiAgd2lkdGg6IDEwMCU7XFxyXFxufVxcclxcblxcclxcbi50aXAge1xcclxcbiAgcG9zaXRpb246IGFic29sdXRlOyBcXHJcXG4gIHdpZHRoOiAxMDBweDsgXFxyXFxuICBoZWlnaHQ6IGF1dG87IFxcclxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcblxuLy8gZXhwb3J0c1xuIiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgbGlzdCA9IFtdO1xuXG5cdC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0dmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cdFx0XHRpZihpdGVtWzJdKSB7XG5cdFx0XHRcdHJldHVybiBcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGNvbnRlbnQgKyBcIn1cIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBjb250ZW50O1xuXHRcdFx0fVxuXHRcdH0pLmpvaW4oXCJcIik7XG5cdH07XG5cblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3Rcblx0bGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSkge1xuXHRcdGlmKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKVxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuXHRcdHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XG5cdFx0XHRpZih0eXBlb2YgaWQgPT09IFwibnVtYmVyXCIpXG5cdFx0XHRcdGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcblx0XHR9XG5cdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBtb2R1bGVzW2ldO1xuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuXHRcdFx0Ly8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcblx0XHRcdC8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXHRcdFx0aWYodHlwZW9mIGl0ZW1bMF0gIT09IFwibnVtYmVyXCIgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcblx0XHRcdFx0aWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuXHRcdFx0XHR9IGVsc2UgaWYobWVkaWFRdWVyeSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBcIihcIiArIGl0ZW1bMl0gKyBcIikgYW5kIChcIiArIG1lZGlhUXVlcnkgKyBcIilcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRsaXN0LnB1c2goaXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRyZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG5cdHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJztcblx0dmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXHRpZiAoIWNzc01hcHBpbmcpIHtcblx0XHRyZXR1cm4gY29udGVudDtcblx0fVxuXG5cdGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcblx0XHR2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuXHRcdFx0cmV0dXJuICcvKiMgc291cmNlVVJMPScgKyBjc3NNYXBwaW5nLnNvdXJjZVJvb3QgKyBzb3VyY2UgKyAnICovJ1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG5cdH1cblxuXHRyZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufVxuXG4vLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuXHR2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcblx0dmFyIGRhdGEgPSAnc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJyArIGJhc2U2NDtcblxuXHRyZXR1cm4gJy8qIyAnICsgZGF0YSArICcgKi8nO1xufVxuIiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxudmFyIHN0eWxlc0luRG9tID0ge307XG5cbnZhclx0bWVtb2l6ZSA9IGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbztcblxuXHRyZXR1cm4gZnVuY3Rpb24gKCkge1xuXHRcdGlmICh0eXBlb2YgbWVtbyA9PT0gXCJ1bmRlZmluZWRcIikgbWVtbyA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIG1lbW87XG5cdH07XG59O1xuXG52YXIgaXNPbGRJRSA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuXHQvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuXHQvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG5cdC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcblx0Ly8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG5cdC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuXHRyZXR1cm4gd2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2I7XG59KTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXQsIHBhcmVudCkge1xuICBpZiAocGFyZW50KXtcbiAgICByZXR1cm4gcGFyZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbiAgfVxuICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xufTtcblxudmFyIGdldEVsZW1lbnQgPSAoZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vID0ge307XG5cblx0cmV0dXJuIGZ1bmN0aW9uKHRhcmdldCwgcGFyZW50KSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgcGFzc2luZyBmdW5jdGlvbiBpbiBvcHRpb25zLCB0aGVuIHVzZSBpdCBmb3IgcmVzb2x2ZSBcImhlYWRcIiBlbGVtZW50LlxuICAgICAgICAgICAgICAgIC8vIFVzZWZ1bCBmb3IgU2hhZG93IFJvb3Qgc3R5bGUgaS5lXG4gICAgICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgICAgIC8vICAgaW5zZXJ0SW50bzogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmb29cIikuc2hhZG93Um9vdCB9XG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHR2YXIgc3R5bGVUYXJnZXQgPSBnZXRUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQsIHBhcmVudCk7XG5cdFx0XHQvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXHRcdFx0aWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG5cdFx0XHRcdFx0Ly8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuXHRcdFx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuXHRcdH1cblx0XHRyZXR1cm4gbWVtb1t0YXJnZXRdXG5cdH07XG59KSgpO1xuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhclx0c2luZ2xldG9uQ291bnRlciA9IDA7XG52YXJcdHN0eWxlc0luc2VydGVkQXRUb3AgPSBbXTtcblxudmFyXHRmaXhVcmxzID0gcmVxdWlyZShcIi4vdXJsc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0LCBvcHRpb25zKSB7XG5cdGlmICh0eXBlb2YgREVCVUcgIT09IFwidW5kZWZpbmVkXCIgJiYgREVCVUcpIHtcblx0XHRpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7XG5cdH1cblxuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRvcHRpb25zLmF0dHJzID0gdHlwZW9mIG9wdGlvbnMuYXR0cnMgPT09IFwib2JqZWN0XCIgPyBvcHRpb25zLmF0dHJzIDoge307XG5cblx0Ly8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG5cdC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2Vcblx0aWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09IFwiYm9vbGVhblwiKSBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSA8aGVhZD4gZWxlbWVudFxuICAgICAgICBpZiAoIW9wdGlvbnMuaW5zZXJ0SW50bykgb3B0aW9ucy5pbnNlcnRJbnRvID0gXCJoZWFkXCI7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgYm90dG9tIG9mIHRoZSB0YXJnZXRcblx0aWYgKCFvcHRpb25zLmluc2VydEF0KSBvcHRpb25zLmluc2VydEF0ID0gXCJib3R0b21cIjtcblxuXHR2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpO1xuXG5cdGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucyk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAobmV3TGlzdCkge1xuXHRcdHZhciBtYXlSZW1vdmUgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0XHRkb21TdHlsZS5yZWZzLS07XG5cdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XG5cdFx0fVxuXG5cdFx0aWYobmV3TGlzdCkge1xuXHRcdFx0dmFyIG5ld1N0eWxlcyA9IGxpc3RUb1N0eWxlcyhuZXdMaXN0LCBvcHRpb25zKTtcblx0XHRcdGFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7XG5cdFx0fVxuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtYXlSZW1vdmUubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXTtcblxuXHRcdFx0aWYoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuXHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSBkb21TdHlsZS5wYXJ0c1tqXSgpO1xuXG5cdFx0XHRcdGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufTtcblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20gKHN0eWxlcywgb3B0aW9ucykge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0aWYoZG9tU3R5bGUpIHtcblx0XHRcdGRvbVN0eWxlLnJlZnMrKztcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHBhcnRzID0gW107XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXG5cdFx0XHRzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHtpZDogaXRlbS5pZCwgcmVmczogMSwgcGFydHM6IHBhcnRzfTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gbGlzdFRvU3R5bGVzIChsaXN0LCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZXMgPSBbXTtcblx0dmFyIG5ld1N0eWxlcyA9IHt9O1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gbGlzdFtpXTtcblx0XHR2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcblx0XHR2YXIgY3NzID0gaXRlbVsxXTtcblx0XHR2YXIgbWVkaWEgPSBpdGVtWzJdO1xuXHRcdHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xuXHRcdHZhciBwYXJ0ID0ge2NzczogY3NzLCBtZWRpYTogbWVkaWEsIHNvdXJjZU1hcDogc291cmNlTWFwfTtcblxuXHRcdGlmKCFuZXdTdHlsZXNbaWRdKSBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0ge2lkOiBpZCwgcGFydHM6IFtwYXJ0XX0pO1xuXHRcdGVsc2UgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpO1xuXHR9XG5cblx0cmV0dXJuIHN0eWxlcztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50IChvcHRpb25zLCBzdHlsZSkge1xuXHR2YXIgdGFyZ2V0ID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8pXG5cblx0aWYgKCF0YXJnZXQpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydEludG8nIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcblx0fVxuXG5cdHZhciBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCA9IHN0eWxlc0luc2VydGVkQXRUb3Bbc3R5bGVzSW5zZXJ0ZWRBdFRvcC5sZW5ndGggLSAxXTtcblxuXHRpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJ0b3BcIikge1xuXHRcdGlmICghbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3ApIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIHRhcmdldC5maXJzdENoaWxkKTtcblx0XHR9IGVsc2UgaWYgKGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdFx0fVxuXHRcdHN0eWxlc0luc2VydGVkQXRUb3AucHVzaChzdHlsZSk7XG5cdH0gZWxzZSBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJib3R0b21cIikge1xuXHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwib2JqZWN0XCIgJiYgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpIHtcblx0XHR2YXIgbmV4dFNpYmxpbmcgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlLCB0YXJnZXQpO1xuXHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIG5leHRTaWJsaW5nKTtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJbU3R5bGUgTG9hZGVyXVxcblxcbiBJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0JyAoJ29wdGlvbnMuaW5zZXJ0QXQnKSBmb3VuZC5cXG4gTXVzdCBiZSAndG9wJywgJ2JvdHRvbScsIG9yIE9iamVjdC5cXG4gKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyI2luc2VydGF0KVxcblwiKTtcblx0fVxufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQgKHN0eWxlKSB7XG5cdGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cdHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xuXG5cdHZhciBpZHggPSBzdHlsZXNJbnNlcnRlZEF0VG9wLmluZGV4T2Yoc3R5bGUpO1xuXHRpZihpZHggPj0gMCkge1xuXHRcdHN0eWxlc0luc2VydGVkQXRUb3Auc3BsaWNlKGlkeCwgMSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXG5cdGlmKG9wdGlvbnMuYXR0cnMubm9uY2UgPT09IHVuZGVmaW5lZCkge1xuXHRcdHZhciBub25jZSA9IGdldE5vbmNlKCk7XG5cdFx0aWYgKG5vbmNlKSB7XG5cdFx0XHRvcHRpb25zLmF0dHJzLm5vbmNlID0gbm9uY2U7XG5cdFx0fVxuXHR9XG5cblx0YWRkQXR0cnMoc3R5bGUsIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGUpO1xuXG5cdHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTGlua0VsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXHRvcHRpb25zLmF0dHJzLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuXG5cdGFkZEF0dHJzKGxpbmssIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgbGluayk7XG5cblx0cmV0dXJuIGxpbms7XG59XG5cbmZ1bmN0aW9uIGFkZEF0dHJzIChlbCwgYXR0cnMpIHtcblx0T2JqZWN0LmtleXMoYXR0cnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdGVsLnNldEF0dHJpYnV0ZShrZXksIGF0dHJzW2tleV0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gZ2V0Tm9uY2UoKSB7XG5cdGlmICh0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRyZXR1cm4gX193ZWJwYWNrX25vbmNlX187XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmosIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlLCB1cGRhdGUsIHJlbW92ZSwgcmVzdWx0O1xuXG5cdC8vIElmIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHdhcyBkZWZpbmVkLCBydW4gaXQgb24gdGhlIGNzc1xuXHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb2JqLmNzcykge1xuXHQgICAgcmVzdWx0ID0gdHlwZW9mIG9wdGlvbnMudHJhbnNmb3JtID09PSAnZnVuY3Rpb24nXG5cdFx0ID8gb3B0aW9ucy50cmFuc2Zvcm0ob2JqLmNzcykgXG5cdFx0IDogb3B0aW9ucy50cmFuc2Zvcm0uZGVmYXVsdChvYmouY3NzKTtcblxuXHQgICAgaWYgKHJlc3VsdCkge1xuXHQgICAgXHQvLyBJZiB0cmFuc2Zvcm0gcmV0dXJucyBhIHZhbHVlLCB1c2UgdGhhdCBpbnN0ZWFkIG9mIHRoZSBvcmlnaW5hbCBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIHJ1bm5pbmcgcnVudGltZSB0cmFuc2Zvcm1hdGlvbnMgb24gdGhlIGNzcy5cblx0ICAgIFx0b2JqLmNzcyA9IHJlc3VsdDtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICBcdC8vIElmIHRoZSB0cmFuc2Zvcm0gZnVuY3Rpb24gcmV0dXJucyBhIGZhbHN5IHZhbHVlLCBkb24ndCBhZGQgdGhpcyBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIGNvbmRpdGlvbmFsIGxvYWRpbmcgb2YgY3NzXG5cdCAgICBcdHJldHVybiBmdW5jdGlvbigpIHtcblx0ICAgIFx0XHQvLyBub29wXG5cdCAgICBcdH07XG5cdCAgICB9XG5cdH1cblxuXHRpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcblx0XHR2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcblxuXHRcdHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuXG5cdFx0dXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG5cdFx0cmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcblxuXHR9IGVsc2UgaWYgKFxuXHRcdG9iai5zb3VyY2VNYXAgJiZcblx0XHR0eXBlb2YgVVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5yZXZva2VPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBCbG9iID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiXG5cdCkge1xuXHRcdHN0eWxlID0gY3JlYXRlTGlua0VsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gdXBkYXRlTGluay5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXG5cdFx0XHRpZihzdHlsZS5ocmVmKSBVUkwucmV2b2tlT2JqZWN0VVJMKHN0eWxlLmhyZWYpO1xuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXHRcdH07XG5cdH1cblxuXHR1cGRhdGUob2JqKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG5ld09iaikge1xuXHRcdGlmIChuZXdPYmopIHtcblx0XHRcdGlmIChcblx0XHRcdFx0bmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJlxuXHRcdFx0XHRuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJlxuXHRcdFx0XHRuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwXG5cdFx0XHQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR1cGRhdGUob2JqID0gbmV3T2JqKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVtb3ZlKCk7XG5cdFx0fVxuXHR9O1xufVxuXG52YXIgcmVwbGFjZVRleHQgPSAoZnVuY3Rpb24gKCkge1xuXHR2YXIgdGV4dFN0b3JlID0gW107XG5cblx0cmV0dXJuIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZW1lbnQpIHtcblx0XHR0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG5cblx0XHRyZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcblx0fTtcbn0pKCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcgKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcblx0dmFyIGNzcyA9IHJlbW92ZSA/IFwiXCIgOiBvYmouY3NzO1xuXG5cdGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG5cdH0gZWxzZSB7XG5cdFx0dmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuXHRcdHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuXHRcdGlmIChjaGlsZE5vZGVzW2luZGV4XSkgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG5cdFx0XHRzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyAoc3R5bGUsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuXG5cdGlmKG1lZGlhKSB7XG5cdFx0c3R5bGUuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgbWVkaWEpXG5cdH1cblxuXHRpZihzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuXHR9IGVsc2Uge1xuXHRcdHdoaWxlKHN0eWxlLmZpcnN0Q2hpbGQpIHtcblx0XHRcdHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuXHRcdH1cblxuXHRcdHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpbmsgKGxpbmssIG9wdGlvbnMsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cblx0Lypcblx0XHRJZiBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgaXNuJ3QgZGVmaW5lZCwgYnV0IHNvdXJjZW1hcHMgYXJlIGVuYWJsZWRcblx0XHRhbmQgdGhlcmUgaXMgbm8gcHVibGljUGF0aCBkZWZpbmVkIHRoZW4gbGV0cyB0dXJuIGNvbnZlcnRUb0Fic29sdXRlVXJsc1xuXHRcdG9uIGJ5IGRlZmF1bHQuICBPdGhlcndpc2UgZGVmYXVsdCB0byB0aGUgY29udmVydFRvQWJzb2x1dGVVcmxzIG9wdGlvblxuXHRcdGRpcmVjdGx5XG5cdCovXG5cdHZhciBhdXRvRml4VXJscyA9IG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzID09PSB1bmRlZmluZWQgJiYgc291cmNlTWFwO1xuXG5cdGlmIChvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyB8fCBhdXRvRml4VXJscykge1xuXHRcdGNzcyA9IGZpeFVybHMoY3NzKTtcblx0fVxuXG5cdGlmIChzb3VyY2VNYXApIHtcblx0XHQvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNjYwMzg3NVxuXHRcdGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIgKyBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpICsgXCIgKi9cIjtcblx0fVxuXG5cdHZhciBibG9iID0gbmV3IEJsb2IoW2Nzc10sIHsgdHlwZTogXCJ0ZXh0L2Nzc1wiIH0pO1xuXG5cdHZhciBvbGRTcmMgPSBsaW5rLmhyZWY7XG5cblx0bGluay5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcblxuXHRpZihvbGRTcmMpIFVSTC5yZXZva2VPYmplY3RVUkwob2xkU3JjKTtcbn1cbiIsIlxuLyoqXG4gKiBXaGVuIHNvdXJjZSBtYXBzIGFyZSBlbmFibGVkLCBgc3R5bGUtbG9hZGVyYCB1c2VzIGEgbGluayBlbGVtZW50IHdpdGggYSBkYXRhLXVyaSB0b1xuICogZW1iZWQgdGhlIGNzcyBvbiB0aGUgcGFnZS4gVGhpcyBicmVha3MgYWxsIHJlbGF0aXZlIHVybHMgYmVjYXVzZSBub3cgdGhleSBhcmUgcmVsYXRpdmUgdG8gYVxuICogYnVuZGxlIGluc3RlYWQgb2YgdGhlIGN1cnJlbnQgcGFnZS5cbiAqXG4gKiBPbmUgc29sdXRpb24gaXMgdG8gb25seSB1c2UgZnVsbCB1cmxzLCBidXQgdGhhdCBtYXkgYmUgaW1wb3NzaWJsZS5cbiAqXG4gKiBJbnN0ZWFkLCB0aGlzIGZ1bmN0aW9uIFwiZml4ZXNcIiB0aGUgcmVsYXRpdmUgdXJscyB0byBiZSBhYnNvbHV0ZSBhY2NvcmRpbmcgdG8gdGhlIGN1cnJlbnQgcGFnZSBsb2NhdGlvbi5cbiAqXG4gKiBBIHJ1ZGltZW50YXJ5IHRlc3Qgc3VpdGUgaXMgbG9jYXRlZCBhdCBgdGVzdC9maXhVcmxzLmpzYCBhbmQgY2FuIGJlIHJ1biB2aWEgdGhlIGBucG0gdGVzdGAgY29tbWFuZC5cbiAqXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzKSB7XG4gIC8vIGdldCBjdXJyZW50IGxvY2F0aW9uXG4gIHZhciBsb2NhdGlvbiA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmxvY2F0aW9uO1xuXG4gIGlmICghbG9jYXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJmaXhVcmxzIHJlcXVpcmVzIHdpbmRvdy5sb2NhdGlvblwiKTtcbiAgfVxuXG5cdC8vIGJsYW5rIG9yIG51bGw/XG5cdGlmICghY3NzIHx8IHR5cGVvZiBjc3MgIT09IFwic3RyaW5nXCIpIHtcblx0ICByZXR1cm4gY3NzO1xuICB9XG5cbiAgdmFyIGJhc2VVcmwgPSBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3Q7XG4gIHZhciBjdXJyZW50RGlyID0gYmFzZVVybCArIGxvY2F0aW9uLnBhdGhuYW1lLnJlcGxhY2UoL1xcL1teXFwvXSokLywgXCIvXCIpO1xuXG5cdC8vIGNvbnZlcnQgZWFjaCB1cmwoLi4uKVxuXHQvKlxuXHRUaGlzIHJlZ3VsYXIgZXhwcmVzc2lvbiBpcyBqdXN0IGEgd2F5IHRvIHJlY3Vyc2l2ZWx5IG1hdGNoIGJyYWNrZXRzIHdpdGhpblxuXHRhIHN0cmluZy5cblxuXHQgL3VybFxccypcXCggID0gTWF0Y2ggb24gdGhlIHdvcmQgXCJ1cmxcIiB3aXRoIGFueSB3aGl0ZXNwYWNlIGFmdGVyIGl0IGFuZCB0aGVuIGEgcGFyZW5zXG5cdCAgICggID0gU3RhcnQgYSBjYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAoPzogID0gU3RhcnQgYSBub24tY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgICAgIFteKShdICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAoPzogID0gU3RhcnQgYW5vdGhlciBub24tY2FwdHVyaW5nIGdyb3Vwc1xuXHQgICAgICAgICAgICAgICAgIFteKShdKyAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICAgICAgW14pKF0qICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIFxcKSAgPSBNYXRjaCBhIGVuZCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKSAgPSBFbmQgR3JvdXBcbiAgICAgICAgICAgICAgKlxcKSA9IE1hdGNoIGFueXRoaW5nIGFuZCB0aGVuIGEgY2xvc2UgcGFyZW5zXG4gICAgICAgICAgKSAgPSBDbG9zZSBub24tY2FwdHVyaW5nIGdyb3VwXG4gICAgICAgICAgKiAgPSBNYXRjaCBhbnl0aGluZ1xuICAgICAgICkgID0gQ2xvc2UgY2FwdHVyaW5nIGdyb3VwXG5cdCBcXCkgID0gTWF0Y2ggYSBjbG9zZSBwYXJlbnNcblxuXHQgL2dpICA9IEdldCBhbGwgbWF0Y2hlcywgbm90IHRoZSBmaXJzdC4gIEJlIGNhc2UgaW5zZW5zaXRpdmUuXG5cdCAqL1xuXHR2YXIgZml4ZWRDc3MgPSBjc3MucmVwbGFjZSgvdXJsXFxzKlxcKCgoPzpbXikoXXxcXCgoPzpbXikoXSt8XFwoW14pKF0qXFwpKSpcXCkpKilcXCkvZ2ksIGZ1bmN0aW9uKGZ1bGxNYXRjaCwgb3JpZ1VybCkge1xuXHRcdC8vIHN0cmlwIHF1b3RlcyAoaWYgdGhleSBleGlzdClcblx0XHR2YXIgdW5xdW90ZWRPcmlnVXJsID0gb3JpZ1VybFxuXHRcdFx0LnRyaW0oKVxuXHRcdFx0LnJlcGxhY2UoL15cIiguKilcIiQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSlcblx0XHRcdC5yZXBsYWNlKC9eJyguKiknJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KTtcblxuXHRcdC8vIGFscmVhZHkgYSBmdWxsIHVybD8gbm8gY2hhbmdlXG5cdFx0aWYgKC9eKCN8ZGF0YTp8aHR0cDpcXC9cXC98aHR0cHM6XFwvXFwvfGZpbGU6XFwvXFwvXFwvfFxccyokKS9pLnRlc3QodW5xdW90ZWRPcmlnVXJsKSkge1xuXHRcdCAgcmV0dXJuIGZ1bGxNYXRjaDtcblx0XHR9XG5cblx0XHQvLyBjb252ZXJ0IHRoZSB1cmwgdG8gYSBmdWxsIHVybFxuXHRcdHZhciBuZXdVcmw7XG5cblx0XHRpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvL1wiKSA9PT0gMCkge1xuXHRcdCAgXHQvL1RPRE86IHNob3VsZCB3ZSBhZGQgcHJvdG9jb2w/XG5cdFx0XHRuZXdVcmwgPSB1bnF1b3RlZE9yaWdVcmw7XG5cdFx0fSBlbHNlIGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi9cIikgPT09IDApIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSBiYXNlIHVybFxuXHRcdFx0bmV3VXJsID0gYmFzZVVybCArIHVucXVvdGVkT3JpZ1VybDsgLy8gYWxyZWFkeSBzdGFydHMgd2l0aCAnLydcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gY3VycmVudCBkaXJlY3Rvcnlcblx0XHRcdG5ld1VybCA9IGN1cnJlbnREaXIgKyB1bnF1b3RlZE9yaWdVcmwucmVwbGFjZSgvXlxcLlxcLy8sIFwiXCIpOyAvLyBTdHJpcCBsZWFkaW5nICcuLydcblx0XHR9XG5cblx0XHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIHVybCguLi4pXG5cdFx0cmV0dXJuIFwidXJsKFwiICsgSlNPTi5zdHJpbmdpZnkobmV3VXJsKSArIFwiKVwiO1xuXHR9KTtcblxuXHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIGNzc1xuXHRyZXR1cm4gZml4ZWRDc3M7XG59O1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTUtMSEuL21haGFsYW5vYmlhLXBhbmVsLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tNS0xIS4vbWFoYWxhbm9iaWEtcGFuZWwuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tNS0xIS4vbWFoYWxhbm9iaWEtcGFuZWwuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZnVuY3Rpb24gTWFoYWxhbm9iaWFEcmF3ZXIoKSB7XHJcbiAgICB0aGlzLmNhbnZhc0FyciA9IFtdO1xyXG4gICAgdGhpcy5jdHhBcnIgPSBbXTtcclxuICAgIHRoaXMuaGVpZ2h0ID0gMjAwO1xyXG4gICAgdGhpcy53aWR0aCA9IDQwMDtcclxuICAgIHRoaXMuZGVmYWx1dFN0eWxlID0ge1xyXG4gICAgICAgIGhvcml6b250YWxfdGlja19zcGFjaW5nOiA1MCwgIC8v5qiq5ZCR5Yi75bqm57q/6Ze06LedXHJcbiAgICAgICAgdmVydGljYWxfdGlja19zcGFjaW5nOiAyNSwgLy/lnoLnm7TliLvluqbnur/pl7Tot51cclxuICAgICAgICBtYXJnaW46IHtcclxuICAgICAgICAgICAgbGVmdDogMzAsXHJcbiAgICAgICAgICAgIGJvdHRvbTogMzAsXHJcbiAgICAgICAgICAgIHRvcDogNSxcclxuICAgICAgICAgICAgcmlnaHQ6IDVcclxuICAgICAgICB9LFxyXG4gICAgICAgIGF4aXM6IHtcclxuICAgICAgICAgICAgdGV4dENvbG9yOiAnd2hpdGUnLFxyXG4gICAgICAgICAgICBsaW5lQ29sb3I6ICcjOGQ4ZjhkJyxcclxuICAgICAgICAgICAgbGluZVdpZHRoOiAxLFxyXG4gICAgICAgICAgICBsaW5laGVpZ2h0OiA2LFxyXG4gICAgICAgICAgICB4OiB7XHJcbiAgICAgICAgICAgICAgICBtYXg6IDEwLFxyXG4gICAgICAgICAgICAgICAgbWluOiAtMTAsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB5OiB7XHJcbiAgICAgICAgICAgICAgICBtYXg6IDEwLFxyXG4gICAgICAgICAgICAgICAgbWluOiAtMTBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2NhdHRlcjoge1xyXG4gICAgICAgICAgICBjb2xvcjogJ3JnYigxMjYsIDE3OCwgMTA5KScsXHJcbiAgICAgICAgICAgIHI6IDRcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNpcmNsZToge1xyXG4gICAgICAgICAgICBjb2xvcjogJ3JnYigxMjYsIDE3OCwgMTA5KSdcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJvdGF0ZUFuZ2VsOiAtNDVcclxuICAgIH07XHJcbiAgICB0aGlzLnhDb252ZXJSYXRpbyA9IDE7XHJcbiAgICB0aGlzLnlDb252ZXJSYXRpbyA9IDE7XHJcblxyXG4gICAgdGhpcy5nZXROZXdTdHlsZSA9IGZ1bmN0aW9uKGNvbmZpZyl7XHJcbiAgICAgICAgdmFyIHN0eWxlID0gXy5jbG9uZURlZXAodGhpcy5kZWZhbHV0U3R5bGUpO1xyXG4gICAgICAgIHN0eWxlLmF4aXMudGV4dENvbG9yID0gY29uZmlnLmF4aXMudGV4dENvbG9yID8gY29uZmlnLmF4aXMudGV4dENvbG9yIDogc3R5bGUuYXhpcy50ZXh0Q29sb3I7XHJcbiAgICAgICAgc3R5bGUuYXhpcy5saW5lQ29sb3IgPSBjb25maWcuYXhpcy5saW5lQ29sb3IgPyBjb25maWcuYXhpcy5saW5lQ29sb3IgOiBzdHlsZS5heGlzLmxpbmVDb2xvcjtcclxuICAgICAgICBzdHlsZS5zY2F0dGVyLmNvbG9yID0gY29uZmlnLnNjYXR0ZXIuY29sb3IgPyBjb25maWcuc2NhdHRlci5jb2xvciA6IHN0eWxlLnNjYXR0ZXIuY29sb3I7XHJcbiAgICAgICAgc3R5bGUuc2NhdHRlci5yID0gY29uZmlnLnNjYXR0ZXIuciA/IGNvbmZpZy5zY2F0dGVyLnIgOiBzY2F0dGVyLnI7XHJcbiAgICAgICAgc3R5bGUuY2lyY2xlLmNvbG9yID0gY29uZmlnLmNpcmNsZS5jb2xvciA/IGNvbmZpZy5jaXJjbGUuY29sb3IgOiBzdHlsZS5jaXJjbGUuY29sb3I7XHJcblxyXG4gICAgICAgIGlmKGNvbmZpZy5heGlzLngpe1xyXG4gICAgICAgICAgICBzdHlsZS5heGlzLngubWluID0gY29uZmlnLmF4aXMueC5taW4gPyAgY29uZmlnLmF4aXMueC5taW4gOiBzdHlsZS5heGlzLngubWluO1xyXG4gICAgICAgICAgICBzdHlsZS5heGlzLngubWF4ID0gY29uZmlnLmF4aXMueC5tYXggPyAgY29uZmlnLmF4aXMueC5tYXggOiBzdHlsZS5heGlzLngubWF4O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZihjb25maWcuYXhpcy55KXtcclxuICAgICAgICAgICAgc3R5bGUuYXhpcy55Lm1pbiA9IGNvbmZpZy5heGlzLnkubWluID8gIGNvbmZpZy5heGlzLnkubWluIDogc3R5bGUuYXhpcy55Lm1pbjtcclxuICAgICAgICAgICAgc3R5bGUuYXhpcy55Lm1heCA9IGNvbmZpZy5heGlzLnkubWF4ID8gIGNvbmZpZy5heGlzLnkubWF4IDogc3R5bGUuYXhpcy55Lm1heDtcclxuICAgICAgICB9XHJcbiAgICAgICBcclxuICAgICAgICByZXR1cm4gc3R5bGU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDotbflp4vmlrnms5VcclxuICAgICAqIHRhcmdldCBqcXVlcnkgaHRtbOWFg+e0oO+8jOWPr+iOt+WPluWFg+e0oOWuveW6plxyXG4gICAgICog5rOo5oSP77ya55S75biD55qE6LW35aeL54K55Zyo5bem5LiK6KeSXHJcbiAgICAgKi9cclxuICAgIHRoaXMuaW5pdCA9IGZ1bmN0aW9uICh0YXJnZXQsIGhlaWdodCwgY29uZmlnKSB7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICAgICAgdGhpcy53aWR0aCA9IHRhcmdldC53aWR0aCgpOyAvLzEwMzVcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLnN0eWxlID0gdGhpcy5nZXROZXdTdHlsZShjb25maWcpO1xyXG5cclxuICAgICAgICB2YXIgaHRtbCA9IFwiPGRpdiBzdHlsZT0nei1pbmRleDowOyBwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDogMDsnPjxjYW52YXMgY2xhc3M9J2NhbnZhcy0wJz48L2NhbnZhcz48L2Rpdj5cIjtcclxuICAgICAgICBodG1sICs9IFwiPGRpdiBzdHlsZT0nei1pbmRleDoyOyBwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDogMDsnPjxjYW52YXMgY2xhc3M9J2NhbnZhcy0xJz48L2NhbnZhcz48L2Rpdj5cIjtcclxuICAgICAgICBodG1sICs9IFwiPGRpdiBzdHlsZT0nei1pbmRleDoxOyBwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDogMDsnPjxjYW52YXMgY2xhc3M9J2NhbnZhcy0yJz48L2NhbnZhcz48L2Rpdj5cIjtcclxuICAgICAgICB0YXJnZXQuaHRtbChodG1sKTtcclxuXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIGNhbnZhcyA9IHRhcmdldC5maW5kKCcuY2FudmFzLScgKyBpKVswXTtcclxuICAgICAgICAgICAgY2FudmFzLndpZHRoID0gdGhpcy53aWR0aDtcclxuICAgICAgICAgICAgY2FudmFzLmhlaWdodCA9IHRoaXMuaGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jYW52YXNBcnJbaV0gPSBjYW52YXM7XHJcbiAgICAgICAgICAgIHRoaXMuY3R4QXJyW2ldID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZHJhdyA9IGZ1bmN0aW9uKG92YWxEYXRhTGlzdCwgc2NhdHRlckRhdGFMaXN0KSB7XHJcblxyXG4gICAgICAgIHRoaXMueENvbnZlclJhdGlvID0gKHRoaXMud2lkdGggLSB0aGlzLnN0eWxlLm1hcmdpbi5sZWZ0IC0gdGhpcy5zdHlsZS5tYXJnaW4ucmlnaHQpIC8gKHRoaXMuc3R5bGUuYXhpcy54Lm1heCAtIHRoaXMuc3R5bGUuYXhpcy54Lm1pbik7XHJcbiAgICAgICAgdGhpcy55Q29udmVyUmF0aW8gPSAodGhpcy5oZWlnaHQgLSB0aGlzLnN0eWxlLm1hcmdpbi50b3AgLSB0aGlzLnN0eWxlLm1hcmdpbi5ib3R0b20pIC8gKHRoaXMuc3R5bGUuYXhpcy55Lm1heCAtIHRoaXMuc3R5bGUuYXhpcy55Lm1pbik7XHJcblxyXG4gICAgICAgIHRoaXMuZHJhd0F4aXMoKTtcclxuICAgICAgICB0aGlzLmRyYXdTY2F0dGVyKHNjYXR0ZXJEYXRhTGlzdCk7XHJcbiAgICAgICAgdGhpcy5kcmF3T3ZhbChvdmFsRGF0YUxpc3QpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZHJhd0F4aXMgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgIHZhciBjb250ZXh0ID0gdGhpcy5jdHhBcnJbMF07XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IHRoaXMuc3R5bGUuYXhpcy5saW5lQ29sb3I7XHJcbiAgICAgICAgY29udGV4dC5saW5lV2lkdGggPSB0aGlzLnN0eWxlLmF4aXMuYXhpc19saW5ld2lkdGg7XHJcblxyXG4gICAgICAgIHRoaXMuZHJhd0hvcml6b250YWxBeGlzKGNvbnRleHQpO1xyXG4gICAgICAgIHRoaXMuZHJhd1ZlcnRpY2FsQXhpcyhjb250ZXh0KTtcclxuICAgICAgICBcclxuICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gdGhpcy5zdHlsZS50aWNrX2NvbG9yXHJcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSB0aGlzLnN0eWxlLmF4aXMudGV4dENvbG9yO1xyXG4gICAgICAgIHRoaXMuZHJhd0hvcml6b250YWxBeGlzVGlja3MoY29udGV4dCk7XHJcbiAgICAgICAgdGhpcy5kcmF3VmVydGljYWxBeGlzVGlja3MoY29udGV4dCk7XHJcbiAgICB9XHJcblxyXG4gICAgIC8qKlxyXG4gICAgICog57uY5Yi2eOi9tDog5bem5LiLID0+IOWPs+S4i1xyXG4gICAgICovXHJcbiAgICB0aGlzLmRyYXdIb3Jpem9udGFsQXhpcyA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XHJcbiAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICBjb250ZXh0Lm1vdmVUbyh0aGlzLnN0eWxlLm1hcmdpbi5sZWZ0LCB0aGlzLmhlaWdodCAtIHRoaXMuc3R5bGUubWFyZ2luLmJvdHRvbSk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8odGhpcy53aWR0aCAtIHRoaXMuc3R5bGUubWFyZ2luLnJpZ2h0LCB0aGlzLmhlaWdodCAtIHRoaXMuc3R5bGUubWFyZ2luLmJvdHRvbSk7XHJcbiAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOe7mOWItnnovbQ6IOW3puS4iyA9PiDlt6bkuIpcclxuICAgICAqL1xyXG4gICAgdGhpcy5kcmF3VmVydGljYWxBeGlzID0gZnVuY3Rpb24oY29udGV4dCkge1xyXG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY29udGV4dC5tb3ZlVG8odGhpcy5zdHlsZS5tYXJnaW4ubGVmdCwgdGhpcy5oZWlnaHQgLSB0aGlzLnN0eWxlLm1hcmdpbi5ib3R0b20pO1xyXG4gICAgICAgIGNvbnRleHQubGluZVRvKHRoaXMuc3R5bGUubWFyZ2luLmxlZnQsIHRoaXMuc3R5bGUubWFyZ2luLnRvcCk7XHJcbiAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOe7mOWItnjovbTliLvluqbvvJog5bemID3jgIsg5Y+zXHJcbiAgICAgKi9cclxuICAgIHRoaXMuZHJhd0hvcml6b250YWxBeGlzVGlja3MgPSBmdW5jdGlvbiAoY29udGV4dCkge1xyXG4gICAgICAgIHZhciBudW0gPSAodGhpcy53aWR0aCAtIHRoaXMuc3R5bGUubWFyZ2luLmxlZnQgLSB0aGlzLnN0eWxlLm1hcmdpbi5yaWdodCkgIC8gdGhpcy5zdHlsZS5ob3Jpem9udGFsX3RpY2tfc3BhY2luZztcclxuICAgICAgICAvL+S7peS4i+atpemqpOS4uuS6hui/veaxguaYvuekujDliLvluqZcclxuICAgICAgICB2YXIgc3RhcnRYID0gMDtcclxuICAgICAgICBpZih0aGlzLnN0eWxlLmF4aXMueC5taW4gPCAwKXtcclxuICAgICAgICAgICAgdmFyIGFjdHVhbERpc3RhbmNlID0gMDtcclxuICAgICAgICAgICAgdmFyIGxhc3REaXN0YW5jZSA9IHRoaXMuc3R5bGUuYXhpcy54Lm1heDsgLy/mnIDov5Hnu53lr7not53nprtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW07IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHggPSBpICogdGhpcy5zdHlsZS5ob3Jpem9udGFsX3RpY2tfc3BhY2luZztcclxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHggLyB0aGlzLnhDb252ZXJSYXRpbyArIHRoaXMuc3R5bGUuYXhpcy54Lm1pbjtcclxuICAgICAgICAgICAgICAgIHZhciBhYnNEaXN0YW5jZSA9IE1hdGguYWJzKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGlmKGFic0Rpc3RhbmNlIDwgbGFzdERpc3RhbmNlKXtcclxuICAgICAgICAgICAgICAgICAgICBsYXN0RGlzdGFuY2UgPSBhYnNEaXN0YW5jZTtcclxuICAgICAgICAgICAgICAgICAgICBhY3R1YWxEaXN0YW5jZSA9IHRoaXMuc3R5bGUuaG9yaXpvbnRhbF90aWNrX3NwYWNpbmcgLSB2YWx1ZSAqIHRoaXMueENvbnZlclJhdGlvO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHN0YXJ0WCA9IGFjdHVhbERpc3RhbmNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICB2YXIgc3RhcnRJbmRleCA9IDE7XHJcbiAgICAgICAgaWYoc3RhcnRYID4gdGhpcy5zdHlsZS5ob3Jpem9udGFsX3RpY2tfc3BhY2luZyl7XHJcbiAgICAgICAgICAgIHN0YXJ0SW5kZXggPSAtMTtcclxuICAgICAgICAgICAgbnVtIC0tO1xyXG4gICAgICAgIH1lbHNlIGlmKHN0YXJ0WCA+IDApe1xyXG4gICAgICAgICAgICBzdGFydEluZGV4ID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0SW5kZXg7IGkgPCBudW07IGkrKykge1xyXG4gICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICB2YXIgeCA9IHN0YXJ0WCArIGkgKiB0aGlzLnN0eWxlLmhvcml6b250YWxfdGlja19zcGFjaW5nO1xyXG4gICAgICAgICAgICBjb250ZXh0Lm1vdmVUbyh0aGlzLnN0eWxlLm1hcmdpbi5sZWZ0ICsgeCwgdGhpcy5oZWlnaHQgLSB0aGlzLnN0eWxlLm1hcmdpbi5ib3R0b20pO1xyXG4gICAgICAgICAgICBjb250ZXh0LmxpbmVUbyh0aGlzLnN0eWxlLm1hcmdpbi5sZWZ0ICsgeCwgdGhpcy5oZWlnaHQgLSB0aGlzLnN0eWxlLm1hcmdpbi5ib3R0b20gKyB0aGlzLnN0eWxlLmF4aXMubGluZWhlaWdodCk7XHJcbiAgICAgICAgICAgIHZhciB0ZXh0ID0gKHgvdGhpcy54Q29udmVyUmF0aW8gKyB0aGlzLnN0eWxlLmF4aXMueC5taW4pLnRvRml4ZWQoMSk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFRleHQodGV4dCwgdGhpcy5zdHlsZS5tYXJnaW4ubGVmdCArIHggLSA4LCB0aGlzLmhlaWdodCAtIHRoaXMuc3R5bGUubWFyZ2luLmxlZnQgKyB0aGlzLnN0eWxlLmF4aXMubGluZWhlaWdodCArIDEyKTtcclxuICAgICAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDnu5jliLZ56L205Yi75bqmOiDkuIsgPT4g5LiKXHJcbiAgICAgKi9cclxuICAgIHRoaXMuZHJhd1ZlcnRpY2FsQXhpc1RpY2tzID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcclxuICAgICAgICB2YXIgZXhpc3RIZWlnaHQgPSB0aGlzLmhlaWdodCAtIHRoaXMuc3R5bGUubWFyZ2luLnRvcCAtIHRoaXMuc3R5bGUubWFyZ2luLmJvdHRvbTtcclxuICAgICAgICB2YXIgbnVtID0gZXhpc3RIZWlnaHQgLyB0aGlzLnN0eWxlLnZlcnRpY2FsX3RpY2tfc3BhY2luZztcclxuICAgICAgICAvL+S7peS4i+atpemqpOS4uuS6hui/veaxguaYvuekujDliLvluqZcclxuICAgICAgICB2YXIgc3RhcnRZID0gMDtcclxuICAgICAgICBpZih0aGlzLnN0eWxlLmF4aXMueS5taW4gPCAwKXtcclxuICAgICAgICAgICAgdmFyIGFjdHVhbERpc3RhbmNlID0gMDtcclxuICAgICAgICAgICAgdmFyIGxhc3REaXN0YW5jZSA9IHRoaXMuc3R5bGUuYXhpcy55Lm1heDsgLy/mnIDov5Hnu53lr7not53nprtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW07IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHkgPSBpICogdGhpcy5zdHlsZS52ZXJ0aWNhbF90aWNrX3NwYWNpbmc7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB5IC8gdGhpcy55Q29udmVyUmF0aW8gKyB0aGlzLnN0eWxlLmF4aXMueS5taW47XHJcbiAgICAgICAgICAgICAgICB2YXIgYWJzRGlzdGFuY2UgPSBNYXRoLmFicyh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBpZihhYnNEaXN0YW5jZSA8IGxhc3REaXN0YW5jZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdERpc3RhbmNlID0gYWJzRGlzdGFuY2U7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0dWFsRGlzdGFuY2UgPSB0aGlzLnN0eWxlLnZlcnRpY2FsX3RpY2tfc3BhY2luZyAtIHZhbHVlICogdGhpcy55Q29udmVyUmF0aW87XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc3RhcnRZID0gYWN0dWFsRGlzdGFuY2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBzdGFydEluZGV4ID0gMTtcclxuICAgICAgICBpZihzdGFydFkgPiB0aGlzLnN0eWxlLnZlcnRpY2FsX3RpY2tfc3BhY2luZyl7XHJcbiAgICAgICAgICAgIHN0YXJ0SW5kZXggPSAwO1xyXG4gICAgICAgICAgICBudW0gKys7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gc3RhcnRJbmRleDsgaSA8IG51bTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgIHZhciB5ID0gc3RhcnRZICsgaSAqIHRoaXMuc3R5bGUudmVydGljYWxfdGlja19zcGFjaW5nICsgdGhpcy5zdHlsZS5tYXJnaW4udG9wO1xyXG4gICAgICAgICAgICB2YXIgYWN0dWFsWSA9IHRoaXMuaGVpZ2h0IC0geTtcclxuICAgICAgICAgICBcclxuICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8odGhpcy5zdHlsZS5tYXJnaW4uYm90dG9tLCBhY3R1YWxZKTtcclxuICAgICAgICAgICAgY29udGV4dC5saW5lVG8odGhpcy5zdHlsZS5tYXJnaW4uYm90dG9tIC0gdGhpcy5zdHlsZS5heGlzLmxpbmVoZWlnaHQsIGFjdHVhbFkpO1xyXG4gICAgICAgICAgICB2YXIgdGV4dCA9ICgoZXhpc3RIZWlnaHQgLSBhY3R1YWxZICsgdGhpcy5zdHlsZS5tYXJnaW4udG9wKS90aGlzLnlDb252ZXJSYXRpbyArIHRoaXMuc3R5bGUuYXhpcy55Lm1pbikudG9GaXhlZCgxKTtcclxuICAgICAgICAgICAgY29udGV4dC5maWxsVGV4dCh0ZXh0LCB0aGlzLnN0eWxlLm1hcmdpbi5ib3R0b20gLSB0aGlzLnN0eWxlLmF4aXMubGluZWhlaWdodCAtIDIwLCBhY3R1YWxZICsgNCk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZHJhd1NjYXR0ZXIgPSBmdW5jdGlvbihzY2F0dGVyRGF0YUxpc3Qpe1xyXG4gICAgICAgIGNvbnRleHQgPSB0aGlzLmN0eEFyclsxXTtcclxuICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gdGhpcy5zdHlsZS5zY2F0dGVyLmNvbG9yO1xyXG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gdGhpcy5zdHlsZS5zY2F0dGVyLmNvbG9yO1xyXG4gICAgICAgIHZhciB4ID0gKHRoaXMud2lkdGggLSB0aGlzLnN0eWxlLm1hcmdpbi5sZWZ0IC0gdGhpcy5zdHlsZS5tYXJnaW4ucmlnaHQpIC8gMiArIHRoaXMuc3R5bGUubWFyZ2luLmxlZnQ7XHJcbiAgICAgICAgdmFyIHkgPSAodGhpcy5oZWlnaHQgLSB0aGlzLnN0eWxlLm1hcmdpbi50b3AgLSB0aGlzLnN0eWxlLm1hcmdpbi5ib3R0b20pIC8gMiArIHRoaXMuc3R5bGUubWFyZ2luLnRvcDtcclxuICAgICAgICB2YXIgcGl4ZWxBcnIgPSBbXTtcclxuICAgICAgICBmb3IodmFyIGk9MDsgaTxzY2F0dGVyRGF0YUxpc3QubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICB2YXIgdGVtcFggPSB4ICsgc2NhdHRlckRhdGFMaXN0W2ldWzBdICogdGhpcy54Q29udmVyUmF0aW87XHJcbiAgICAgICAgICAgIHZhciB0ZW1weSA9IHkgLSBzY2F0dGVyRGF0YUxpc3RbaV1bMV0gKiB0aGlzLnlDb252ZXJSYXRpbztcclxuICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICAgICAgY29udGV4dC5hcmModGVtcFgsIHRlbXB5LCB0aGlzLnN0eWxlLnNjYXR0ZXIuciwgMCwgMiAqIE1hdGguUEkpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmZpbGwoKTtcclxuICAgICAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgICAgICAgcGl4ZWxBcnIucHVzaChbdGVtcFgsIHRlbXB5LCBzY2F0dGVyRGF0YUxpc3RbaV1bMF0sIHNjYXR0ZXJEYXRhTGlzdFtpXVsxXV0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5jYW52YXNBcnJbMV0uYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCB0aGlzLmRvTW91c2VNb3ZlLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5jYW52YXNBcnJbMV0ucG9pbnREYXRhID0gcGl4ZWxBcnI7XHJcbiAgICAgICAgdGhpcy5jYW52YXNBcnJbMV0uY2FudmFzU3R5bGUgPSB0aGlzLnN0eWxlO1xyXG4gICAgICAgIHRoaXMuY2FudmFzQXJyWzFdLnNob3dEZXRhaWwgPSB0aGlzLnNob3dQb2ludERldGFpbDtcclxuICAgICAgICB0aGlzLmNhbnZhc0FyclsxXS50YXJnZXQgPSB0aGlzLnRhcmdldDtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmRyYXdPdmFsID0gZnVuY3Rpb24ob3ZhbExpc3Qpe1xyXG4gICAgICAgIHZhciBjb250ZXh0ID0gdGhpcy5jdHhBcnJbMl07XHJcbiAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IHRoaXMuc3R5bGUuY2lyY2xlLmNvbG9yO1xyXG4gICAgICAgIHZhciB4ID0gKHRoaXMud2lkdGggLSB0aGlzLnN0eWxlLm1hcmdpbi5sZWZ0IC0gdGhpcy5zdHlsZS5tYXJnaW4ucmlnaHQpIC8gMiArIHRoaXMuc3R5bGUubWFyZ2luLmxlZnQ7IC8v55S75biD5Lit5b+DeFxyXG4gICAgICAgIHZhciB5ID0gKHRoaXMuaGVpZ2h0IC0gdGhpcy5zdHlsZS5tYXJnaW4udG9wIC0gdGhpcy5zdHlsZS5tYXJnaW4uYm90dG9tKSAvIDIgKyB0aGlzLnN0eWxlLm1hcmdpbi50b3A7IC8v55S75biD5Lit5b+DeVxyXG4gICAgICAgIGZvcih2YXIgaT0wOyBpPG92YWxMaXN0Lmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgdmFyIGhvcml6b250YWxSID0gb3ZhbExpc3RbaV1bMl0gKiB0aGlzLnhDb252ZXJSYXRpbyAvIDI7IC8v5qSt5ZyG6ZW/6L20ID0+IOawtOW5s+WNiuW+hFxyXG4gICAgICAgICAgICB2YXIgdmVydGljYWxSID0gb3ZhbExpc3RbaV1bM10gKiB0aGlzLnlDb252ZXJSYXRpbyAvIDI7IC8v5qSt5ZyG55+t6L20ID0+IOerluebtOWNiuW+hFxyXG4gICAgICAgICAgICB2YXIgeE1vdmUgPSB4ICsgb3ZhbExpc3RbaV1bMF0gKiB0aGlzLnhDb252ZXJSYXRpbztcclxuICAgICAgICAgICAgdmFyIHlNb3ZlID0geSAtIG92YWxMaXN0W2ldWzFdICogdGhpcy55Q29udmVyUmF0aW87XHJcbiAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc2V0TGluZURhc2goWzUsOF0pXHJcbiAgICAgICAgICAgIGNvbnRleHQubW92ZVRvKHhNb3ZlIC0gaG9yaXpvbnRhbFIsIHkpOyAvL+acgOW3puerr1xyXG4gICAgICAgICAgICBjb250ZXh0LmJlemllckN1cnZlVG8oeE1vdmUgLSBob3Jpem9udGFsUiwgeU1vdmUgKyB2ZXJ0aWNhbFIsIHhNb3ZlICsgaG9yaXpvbnRhbFIsIHlNb3ZlICsgdmVydGljYWxSLCB4TW92ZSArIGhvcml6b250YWxSLCB5TW92ZSk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuYmV6aWVyQ3VydmVUbyh4TW92ZSArIGhvcml6b250YWxSLCB5TW92ZSAtIHZlcnRpY2FsUiwgeE1vdmUgLSBob3Jpem9udGFsUiwgeU1vdmUgLSB2ZXJ0aWNhbFIsIHhNb3ZlIC0gaG9yaXpvbnRhbFIsIHlNb3ZlKTtcclxuICAgICAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy92YXIgYW5nbGUgPSAxODAgKiBNYXRoLmF0YW4oeS94KSAvIE1hdGguUEk7IC8v5LiN5ZCM6auY5a695q+U77yM5YC+5pac6KeS5bqm5LiN5LiA5qC344CCYXRhbuW+l+WIsOW8p+W6puWItu+8jOWGjei9rOS4uuinkuW6plxyXG4gICAgICAgIHZhciByb3RhdGUgPSBvdmFsTGlzdFswXVs0XTtcclxuICAgICAgICB2YXIgYW5nbGUgPSByb3RhdGUgKiAoeSAtIG92YWxMaXN0WzBdWzFdICogdGhpcy55Q29udmVyUmF0aW8pIC8gKHggKyBvdmFsTGlzdFswXVswXSAqIHRoaXMueENvbnZlclJhdGlvKTtcclxuICAgICAgICB0aGlzLmNhbnZhc0FyclsyXS5zdHlsZS5jc3NUZXh0ID0gXCItd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKC1cIiArIGFuZ2xlICsgXCJkZWcpXCI7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5kb01vdXNlTW92ZSA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgdmFyIHBpeGVsQXJyID0gdGhpcy5wb2ludERhdGE7XHJcbiAgICAgICAgdmFyIGJib3ggPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIHZhciB4ID0gKGV2ZW50LnBhZ2VYIC0gYmJveC5sZWZ0KSAqICh0aGlzLndpZHRoIC8gYmJveC53aWR0aCk7XHJcbiAgICAgICAgdmFyIHkgPSAoZXZlbnQucGFnZVkgLSBiYm94LnRvcCkgKiAodGhpcy5oZWlnaHQgLyBiYm94LmhlaWdodCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIGNoZWNrUG9pbnQgPSBmYWxzZTtcclxuICAgICAgICB2YXIgc3R5bGUgPSB0aGlzLmNhbnZhc1N0eWxlO1xyXG4gICAgICAgIGZvcih2YXIgaT0wOyBpPHBpeGVsQXJyLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgdmFyIHhtYXggPSBwaXhlbEFycltpXVswXSArIHN0eWxlLnNjYXR0ZXIucjtcclxuICAgICAgICAgICAgdmFyIHhtaW4gPSBwaXhlbEFycltpXVswXSAtIHN0eWxlLnNjYXR0ZXIucjtcclxuICAgICAgICAgICAgdmFyIHltYXggPSBwaXhlbEFycltpXVsxXSArIHN0eWxlLnNjYXR0ZXIucjtcclxuICAgICAgICAgICAgdmFyIHltaW4gPSBwaXhlbEFycltpXVsxXSAtIHN0eWxlLnNjYXR0ZXIucjtcclxuICAgICAgICAgICAgaWYoIHggPD0geG1heCAmJiB4ID49IHhtaW4gJiYgeSA8PSB5bWF4ICYmIHkgPj0geW1pbil7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dEZXRhaWwocGl4ZWxBcnJbaV1bMl0sIHBpeGVsQXJyW2ldWzNdLCBldmVudC5wYWdlWCAtIGJib3gubGVmdCwgZXZlbnQucGFnZVkgLSBiYm94LnRvcCk7XHJcbiAgICAgICAgICAgICAgICBjaGVja1BvaW50ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZighY2hlY2tQb2ludCl7XHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0LnBhcmVudCgpLmZpbmQoXCIudGlwXCIpLnJlbW92ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnNob3dQb2ludERldGFpbCA9IGZ1bmN0aW9uKHgsIHksIHRvcCwgbGVmdCl7XHJcbiAgICAgICAgdGhpcy50YXJnZXQucGFyZW50KCkuZmluZChcIi50aXBcIikucmVtb3ZlKCk7XHJcbiAgICAgICAgdmFyIHRpcCA9ICQoXCI8ZGl2IGNsYXNzPSd0aXAnIHN0eWxlPSd6LWluZGV4OjMnPiB4OiBcIiArIHgudG9GaXhlZCgyKSArIFwiIHk6IFwiICsgeS50b0ZpeGVkKDIpICsgXCI8L2Rpdj5cIilcclxuICAgICAgICB0aXAuY3NzKHtcclxuICAgICAgICAgICAgJ3RvcCcgOiBsZWZ0ICsgJ3B4JyxcclxuICAgICAgICAgICAgJ2xlZnQnOiB0b3AgKyAncHgnXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGlwLmFwcGVuZFRvKHRoaXMudGFyZ2V0LnBhcmVudCgpKTtcclxuICAgIH1cclxuXHJcbiAgICBcclxufVxyXG5cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gbmV3IE1haGFsYW5vYmlhRHJhd2VyKCk7IiwiaW1wb3J0IHsgTWV0cmljc1BhbmVsQ3RybCB9IGZyb20gJ2dyYWZhbmEvYXBwL3BsdWdpbnMvc2RrJztcclxuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcclxuaW1wb3J0ICcuL2Nzcy9tYWhhbGFub2JpYS1wYW5lbC5jc3MnO1xyXG5pbXBvcnQgZHJhd2VyIGZyb20gJy4vZXh0ZXJuYWwvbWFoYWxhbm9iaWEtZHJhd2VyJztcclxuXHJcbmV4cG9ydCBjbGFzcyBNYWhhbGFub2JpYUN0cmwgZXh0ZW5kcyBNZXRyaWNzUGFuZWxDdHJsIHtcclxuICBzdGF0aWMgdGVtcGxhdGVVcmwgPSAncGFydGlhbHMvbW9kdWxlLmh0bWwnO1xyXG5cclxuICBwYW5lbERlZmF1bHRzID0ge1xyXG4gICAgYmdDb2xvcjogbnVsbCxcclxuICAgIGF4aXM6IHtcclxuICAgICAgdGV4dENvbG9yOiBudWxsLFxyXG4gICAgICBsaW5lQ29sb3I6IG51bGwsXHJcbiAgICAgIHg6IHtcclxuICAgICAgICBtYXg6IDEwLFxyXG4gICAgICAgIG1pbjogLTEwLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIHk6IHtcclxuICAgICAgICAgIG1heDogMTAsXHJcbiAgICAgICAgICBtaW46IC0xMFxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgc2NhdHRlcjoge1xyXG4gICAgICBjb2xvcjogbnVsbCxcclxuICAgICAgcjogM1xyXG4gICAgfSxcclxuICAgIGNpcmNsZToge1xyXG4gICAgICBjb2xvcjogbnVsbFxyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHByaXZhdGUgb3ZhbERhdGFMaXN0OiBhbnk7XHJcbiAgcHJpdmF0ZSBzY2F0dGVyRGF0YUxpc3Q6IGFueTtcclxuICBwcml2YXRlIGRhdGFJc09LOiBCb29sZWFuO1xyXG5cclxuICAvKiogQG5nSW5qZWN0ICovXHJcbiAgY29uc3RydWN0b3IoJHNjb3BlLCAkaW5qZWN0b3IpIHtcclxuICAgIHN1cGVyKCRzY29wZSwgJGluamVjdG9yKTtcclxuICAgIF8uZGVmYXVsdHNEZWVwKHRoaXMucGFuZWwsIHRoaXMucGFuZWxEZWZhdWx0cyk7XHJcblxyXG4gICAgdGhpcy5ldmVudHMub24oJ2luaXQtZWRpdC1tb2RlJywgdGhpcy5vbkluaXRFZGl0TW9kZS5iaW5kKHRoaXMpKTtcclxuICAgIHRoaXMuZXZlbnRzLm9uKCdwYW5lbC10ZWFyZG93bicsIHRoaXMub25QYW5lbFRlYXJkb3duLmJpbmQodGhpcykpO1xyXG4gICAgdGhpcy5ldmVudHMub24oJ2RhdGEtcmVjZWl2ZWQnLCB0aGlzLm9uRGF0YVJlY2VpdmVkLmJpbmQodGhpcykpO1xyXG4gICAgdGhpcy5ldmVudHMub24oJ2RhdGEtZXJyb3InLCB0aGlzLm9uRGF0YUVycm9yLmJpbmQodGhpcykpO1xyXG4gIH1cclxuXHJcbiAgb25Jbml0RWRpdE1vZGUoKSB7XHJcbiAgICB0aGlzLmFkZEVkaXRvclRhYignT3B0aW9ucycsICdwdWJsaWMvcGx1Z2lucy9vZ2UtbWFoYWxhbm9iaWEtZGlzdGFuY2UvcGFydGlhbHMvb3B0aW9ucy5odG1sJywgMik7XHJcbiAgfVxyXG5cclxuICBvblBhbmVsVGVhcmRvd24oKSB7XHJcbiAgfVxyXG5cclxuICBvbkRhdGFSZWNlaXZlZChkYXRhTGlzdCkge1xyXG4gICAgaWYoIWRhdGFMaXN0IHx8IGRhdGFMaXN0Lmxlbmd0aCAhPSAyIHx8ICFkYXRhTGlzdFswXS5yb3dzIHx8ICFkYXRhTGlzdFsxXS5yb3dzIHx8IGRhdGFMaXN0WzBdLmNvbHVtbnMubGVuZ3RoICE9IDIgfHwgZGF0YUxpc3RbMV0uY29sdW1ucy5sZW5ndGggIT0gNSl7XHJcbiAgICAgIHRoaXMuZGF0YUlzT0sgPSBmYWxzZTtcclxuICAgIH1lbHNle1xyXG4gICAgICB0aGlzLnNjYXR0ZXJEYXRhTGlzdCA9IGRhdGFMaXN0WzBdLnJvd3M7IC8v5a2Y5YKoeCx55bqn5qCHXHJcbiAgICAgIHRoaXMub3ZhbERhdGFMaXN0ID0gZGF0YUxpc3RbMV0ucm93czsgLy/lrZjlgqjmpK3lnIbnlLvlm77kv6Hmga86IHgseSxyMSxyMixyb3RhdGVcclxuICAgICAgdGhpcy5kYXRhSXNPSyA9IHRydWU7XHJcbiAgICB9XHJcbiAgICB0aGlzLnJlbmRlcigpO1xyXG4gIH1cclxuXHJcbiAgb25EYXRhRXJyb3IoKXtcclxuICAgIHRoaXMuZGF0YUlzT0sgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIGxpbmsoX3Njb3BlLCBlbGVtLCBfYXR0cnMsIGN0cmwpIHtcclxuICAgIHRoaXMuZXZlbnRzLm9uKCdyZW5kZXInLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0ICRwYW5lbENvbnRlbnQgPSBlbGVtLmZpbmQoJy5wYW5lbC1jb250ZW50Jyk7XHJcbiAgICAgIGlmICh0aGlzLnBhbmVsLmJnQ29sb3IpIHtcclxuICAgICAgICAkcGFuZWxDb250ZW50LmNzcygnYmFja2dyb3VuZC1jb2xvcicsIHRoaXMucGFuZWwuYmdDb2xvcik7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgJHBhbmVsQ29udGVudC5jc3MoJ2JhY2tncm91bmQtY29sb3InLCAnJyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBjYW52YXNQYW5lbCA9IGVsZW0uZmluZCgnLmNhbnZhcy1wYW5lbCcpO1xyXG4gICAgICB2YXIgd2FybmluZ1BhbmVsID0gZWxlbS5maW5kKCcuZGF0YXBvaW50cy13YXJuaW5nJyk7XHJcbiAgICAgIGlmKHRoaXMuZGF0YUlzT0spe1xyXG4gICAgICAgIGNhbnZhc1BhbmVsLnNob3coKTtcclxuICAgICAgICB3YXJuaW5nUGFuZWwuaGlkZSgpO1xyXG4gICAgICB9ZWxzZXtcclxuICAgICAgICB3YXJuaW5nUGFuZWwuc2hvdygpO1xyXG4gICAgICAgIGNhbnZhc1BhbmVsLmh0bWwoXCJcIikuaGlkZSgpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYoY2FudmFzUGFuZWwubGVuZ3RoID09IDApe1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBkcmF3ZXIuaW5pdChjYW52YXNQYW5lbCwgY3RybC5oZWlnaHQsIHRoaXMucGFuZWwpO1xyXG4gICAgICBkcmF3ZXIuZHJhdyh0aGlzLm92YWxEYXRhTGlzdCwgdGhpcy5zY2F0dGVyRGF0YUxpc3QpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=